{"version":3,"sources":["../../src/datasource-zabbix/DataProcessor.js"],"names":[],"mappings":"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","file":"DataProcessor.js","sourcesContent":["import _ from 'lodash';\nimport * as utils from './utils';\n\nexport default class DataProcessor {\n\n  /**\n   * Downsample datapoints series\n   */\n  static downsampleSeries(datapoints, time_to, ms_interval, func) {\n    var downsampledSeries = [];\n    var timeWindow = {\n      from: time_to * 1000 - ms_interval,\n      to: time_to * 1000\n    };\n\n    var points_sum = 0;\n    var points_num = 0;\n    var value_avg = 0;\n    var frame = [];\n\n    for (var i = datapoints.length - 1; i >= 0; i -= 1) {\n      if (timeWindow.from < datapoints[i][1] && datapoints[i][1] <= timeWindow.to) {\n        points_sum += datapoints[i][0];\n        points_num++;\n        frame.push(datapoints[i][0]);\n      }\n      else {\n        value_avg = points_num ? points_sum / points_num : 0;\n\n        if (func === \"max\") {\n          downsampledSeries.push([_.max(frame), timeWindow.to]);\n        }\n        else if (func === \"min\") {\n          downsampledSeries.push([_.min(frame), timeWindow.to]);\n        }\n\n        // avg by default\n        else {\n          downsampledSeries.push([value_avg, timeWindow.to]);\n        }\n\n        // Shift time window\n        timeWindow.to = timeWindow.from;\n        timeWindow.from -= ms_interval;\n\n        points_sum = 0;\n        points_num = 0;\n        frame = [];\n\n        // Process point again\n        i++;\n      }\n    }\n    return downsampledSeries.reverse();\n  }\n\n  /**\n   * Group points by given time interval\n   * datapoints: [[<value>, <unixtime>], ...]\n   */\n  static groupBy(interval, groupByCallback, datapoints) {\n    var ms_interval = utils.parseInterval(interval);\n\n    // Calculate frame timestamps\n    var frames = _.groupBy(datapoints, function(point) {\n      // Calculate time for group of points\n      return Math.floor(point[1] / ms_interval) * ms_interval;\n    });\n\n    // frame: { '<unixtime>': [[<value>, <unixtime>], ...] }\n    // return [{ '<unixtime>': <value> }, { '<unixtime>': <value> }, ...]\n    var grouped = _.mapValues(frames, function(frame) {\n      var points = _.map(frame, function(point) {\n        return point[0];\n      });\n      return groupByCallback(points);\n    });\n\n    // Convert points to Grafana format\n    return sortByTime(_.map(grouped, function(value, timestamp) {\n      return [Number(value), Number(timestamp)];\n    }));\n  }\n\n  static sumSeries(timeseries) {\n\n    // Calculate new points for interpolation\n    var new_timestamps = _.uniq(_.map(_.flatten(timeseries, true), function(point) {\n      return point[1];\n    }));\n    new_timestamps = _.sortBy(new_timestamps);\n\n    var interpolated_timeseries = _.map(timeseries, function(series) {\n      var timestamps = _.map(series, function(point) {\n        return point[1];\n      });\n      var new_points = _.map(_.difference(new_timestamps, timestamps), function(timestamp) {\n        return [null, timestamp];\n      });\n      var new_series = series.concat(new_points);\n      return sortByTime(new_series);\n    });\n\n    _.each(interpolated_timeseries, interpolateSeries);\n\n    var new_timeseries = [];\n    var sum;\n    for (var i = new_timestamps.length - 1; i >= 0; i--) {\n      sum = 0;\n      for (var j = interpolated_timeseries.length - 1; j >= 0; j--) {\n        sum += interpolated_timeseries[j][i][0];\n      }\n      new_timeseries.push([sum, new_timestamps[i]]);\n    }\n\n    return sortByTime(new_timeseries);\n  }\n\n  static AVERAGE(values) {\n    var sum = 0;\n    _.each(values, function(value) {\n      sum += value;\n    });\n    return sum / values.length;\n  }\n\n  static MIN(values) {\n    return _.min(values);\n  }\n\n  static MAX(values) {\n    return _.max(values);\n  }\n\n  static MEDIAN(values) {\n    var sorted = _.sortBy(values);\n    return sorted[Math.floor(sorted.length / 2)];\n  }\n\n  static setAlias(alias, timeseries) {\n    timeseries.target = alias;\n    return timeseries;\n  }\n\n  static groupByWrapper(interval, groupFunc, datapoints) {\n    var groupByCallback = DataProcessor.aggregationFunctions[groupFunc];\n    return DataProcessor.groupBy(interval, groupByCallback, datapoints);\n  }\n\n  static aggregateWrapper(groupByCallback, interval, datapoints) {\n    var flattenedPoints = _.flatten(datapoints, true);\n    return DataProcessor.groupBy(interval, groupByCallback, flattenedPoints);\n  }\n\n  static get aggregationFunctions() {\n    return {\n      avg: this.AVERAGE,\n      min: this.MIN,\n      max: this.MAX,\n      median: this.MEDIAN\n    };\n  }\n\n  static get metricFunctions() {\n    return {\n      groupBy: this.groupByWrapper,\n      average: _.partial(this.aggregateWrapper, this.AVERAGE),\n      min: _.partial(this.aggregateWrapper, this.MIN),\n      max: _.partial(this.aggregateWrapper, this.MAX),\n      median: _.partial(this.aggregateWrapper, this.MEDIAN),\n      sumSeries: this.sumSeries,\n      setAlias: this.setAlias,\n    };\n  }\n}\n\nfunction sortByTime(series) {\n  return _.sortBy(series, function(point) {\n    return point[1];\n  });\n}\n\n/**\n * Interpolate series with gaps\n */\nfunction interpolateSeries(series) {\n  var left, right;\n\n  // Interpolate series\n  for (var i = series.length - 1; i >= 0; i--) {\n    if (!series[i][0]) {\n      left = findNearestLeft(series, series[i]);\n      right = findNearestRight(series, series[i]);\n      if (!left) {\n        left = right;\n      }\n      if (!right) {\n        right = left;\n      }\n      series[i][0] = linearInterpolation(series[i][1], left, right);\n    }\n  }\n  return series;\n}\n\nfunction linearInterpolation(timestamp, left, right) {\n  if (left[1] === right[1]) {\n    return (left[0] + right[0]) / 2;\n  } else {\n    return (left[0] + (right[0] - left[0]) / (right[1] - left[1]) * (timestamp - left[1]));\n  }\n}\n\nfunction findNearestRight(series, point) {\n  var point_index = _.indexOf(series, point);\n  var nearestRight;\n  for (var i = point_index; i < series.length; i++) {\n    if (series[i][0]) {\n      return series[i];\n    }\n  }\n  return nearestRight;\n}\n\nfunction findNearestLeft(series, point) {\n  var point_index = _.indexOf(series, point);\n  var nearestLeft;\n  for (var i = point_index; i > 0; i--) {\n    if (series[i][0]) {\n      return series[i];\n    }\n  }\n  return nearestLeft;\n}\n"]}