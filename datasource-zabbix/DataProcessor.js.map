{"version":3,"sources":["../../src/datasource-zabbix/DataProcessor.js"],"names":[],"mappings":"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","file":"DataProcessor.js","sourcesContent":["import _ from 'lodash';\nimport * as utils from './utils';\n\nexport default class DataProcessor {\n\n  /**\n   * Downsample datapoints series\n   */\n  static downsampleSeries(datapoints, time_to, ms_interval, func) {\n    var downsampledSeries = [];\n    var timeWindow = {\n      from: time_to * 1000 - ms_interval,\n      to: time_to * 1000\n    };\n\n    var points_sum = 0;\n    var points_num = 0;\n    var value_avg = 0;\n    var frame = [];\n\n    for (var i = datapoints.length - 1; i >= 0; i -= 1) {\n      if (timeWindow.from < datapoints[i][1] && datapoints[i][1] <= timeWindow.to) {\n        points_sum += datapoints[i][0];\n        points_num++;\n        frame.push(datapoints[i][0]);\n      }\n      else {\n        value_avg = points_num ? points_sum / points_num : 0;\n\n        if (func === \"max\") {\n          downsampledSeries.push([_.max(frame), timeWindow.to]);\n        }\n        else if (func === \"min\") {\n          downsampledSeries.push([_.min(frame), timeWindow.to]);\n        }\n\n        // avg by default\n        else {\n          downsampledSeries.push([value_avg, timeWindow.to]);\n        }\n\n        // Shift time window\n        timeWindow.to = timeWindow.from;\n        timeWindow.from -= ms_interval;\n\n        points_sum = 0;\n        points_num = 0;\n        frame = [];\n\n        // Process point again\n        i++;\n      }\n    }\n    return downsampledSeries.reverse();\n  }\n\n  /**\n   * Group points by given time interval\n   * datapoints: [[<value>, <unixtime>], ...]\n   */\n  static groupBy(interval, groupByCallback, datapoints) {\n    var ms_interval = utils.parseInterval(interval);\n\n    // Calculate frame timestamps\n    var frames = _.groupBy(datapoints, function(point) {\n      // Calculate time for group of points\n      return Math.floor(point[1] / ms_interval) * ms_interval;\n    });\n\n    // frame: { '<unixtime>': [[<value>, <unixtime>], ...] }\n    // return [{ '<unixtime>': <value> }, { '<unixtime>': <value> }, ...]\n    var grouped = _.mapValues(frames, function(frame) {\n      var points = _.map(frame, function(point) {\n        return point[0];\n      });\n      return groupByCallback(points);\n    });\n\n    // Convert points to Grafana format\n    return sortByTime(_.map(grouped, function(value, timestamp) {\n      return [Number(value), Number(timestamp)];\n    }));\n  }\n\n  static sumSeries(timeseries) {\n\n    // Calculate new points for interpolation\n    var new_timestamps = _.uniq(_.map(_.flatten(timeseries, true), function(point) {\n      return point[1];\n    }));\n    new_timestamps = _.sortBy(new_timestamps);\n\n    var interpolated_timeseries = _.map(timeseries, function(series) {\n      var timestamps = _.map(series, function(point) {\n        return point[1];\n      });\n      var new_points = _.map(_.difference(new_timestamps, timestamps), function(timestamp) {\n        return [null, timestamp];\n      });\n      var new_series = series.concat(new_points);\n      return sortByTime(new_series);\n    });\n\n    _.each(interpolated_timeseries, interpolateSeries);\n\n    var new_timeseries = [];\n    var sum;\n    for (var i = new_timestamps.length - 1; i >= 0; i--) {\n      sum = 0;\n      for (var j = interpolated_timeseries.length - 1; j >= 0; j--) {\n        sum += interpolated_timeseries[j][i][0];\n      }\n      new_timeseries.push([sum, new_timestamps[i]]);\n    }\n\n    return sortByTime(new_timeseries);\n  }\n\n  static limit(order, n, orderByFunc, timeseries) {\n    let orderByCallback = DataProcessor.aggregationFunctions[orderByFunc];\n    let sortByIteratee = (ts) => {\n      let values = _.map(ts.datapoints, (point) => {\n        return point[0];\n      });\n      return orderByCallback(values);\n    };\n    let sortedTimeseries = _.sortBy(timeseries, sortByIteratee);\n    if (order === 'bottom') {\n      return sortedTimeseries.slice(0, n);\n    } else {\n      return sortedTimeseries.slice(-n);\n    }\n  }\n\n  static AVERAGE(values) {\n    var sum = 0;\n    _.each(values, function(value) {\n      sum += value;\n    });\n    return sum / values.length;\n  }\n\n  static MIN(values) {\n    return _.min(values);\n  }\n\n  static MAX(values) {\n    return _.max(values);\n  }\n\n  static MEDIAN(values) {\n    var sorted = _.sortBy(values);\n    return sorted[Math.floor(sorted.length / 2)];\n  }\n\n  static setAlias(alias, timeseries) {\n    timeseries.target = alias;\n    return timeseries;\n  }\n\n  static scale(factor, datapoints) {\n    return _.map(datapoints, point => {\n      return [\n        point[0] * factor,\n        point[1]\n      ];\n    });\n  }\n\n  static delta(datapoints) {\n    let newSeries = [];\n    let deltaValue;\n    for (var i = 1; i < datapoints.length; i++) {\n      deltaValue = datapoints[i][0] - datapoints[i - 1][0];\n      newSeries.push([deltaValue, datapoints[i][1]]);\n    }\n    return newSeries;\n  }\n\n  static groupByWrapper(interval, groupFunc, datapoints) {\n    var groupByCallback = DataProcessor.aggregationFunctions[groupFunc];\n    return DataProcessor.groupBy(interval, groupByCallback, datapoints);\n  }\n\n  static aggregateByWrapper(interval, aggregateFunc, datapoints) {\n    // Flatten all points in frame and then just use groupBy()\n    var flattenedPoints = _.flatten(datapoints, true);\n    var groupByCallback = DataProcessor.aggregationFunctions[aggregateFunc];\n    return DataProcessor.groupBy(interval, groupByCallback, flattenedPoints);\n  }\n\n  static aggregateWrapper(groupByCallback, interval, datapoints) {\n    var flattenedPoints = _.flatten(datapoints, true);\n    return DataProcessor.groupBy(interval, groupByCallback, flattenedPoints);\n  }\n\n  static get aggregationFunctions() {\n    return {\n      avg: this.AVERAGE,\n      min: this.MIN,\n      max: this.MAX,\n      median: this.MEDIAN\n    };\n  }\n\n  static get metricFunctions() {\n    return {\n      groupBy: this.groupByWrapper,\n      scale: this.scale,\n      delta: this.delta,\n      aggregateBy: this.aggregateByWrapper,\n      average: _.partial(this.aggregateWrapper, this.AVERAGE),\n      min: _.partial(this.aggregateWrapper, this.MIN),\n      max: _.partial(this.aggregateWrapper, this.MAX),\n      median: _.partial(this.aggregateWrapper, this.MEDIAN),\n      sumSeries: this.sumSeries,\n      top: _.partial(this.limit, 'top'),\n      bottom: _.partial(this.limit, 'bottom'),\n      setAlias: this.setAlias,\n    };\n  }\n}\n\nfunction sortByTime(series) {\n  return _.sortBy(series, function(point) {\n    return point[1];\n  });\n}\n\n/**\n * Interpolate series with gaps\n */\nfunction interpolateSeries(series) {\n  var left, right;\n\n  // Interpolate series\n  for (var i = series.length - 1; i >= 0; i--) {\n    if (!series[i][0]) {\n      left = findNearestLeft(series, series[i]);\n      right = findNearestRight(series, series[i]);\n      if (!left) {\n        left = right;\n      }\n      if (!right) {\n        right = left;\n      }\n      series[i][0] = linearInterpolation(series[i][1], left, right);\n    }\n  }\n  return series;\n}\n\nfunction linearInterpolation(timestamp, left, right) {\n  if (left[1] === right[1]) {\n    return (left[0] + right[0]) / 2;\n  } else {\n    return (left[0] + (right[0] - left[0]) / (right[1] - left[1]) * (timestamp - left[1]));\n  }\n}\n\nfunction findNearestRight(series, point) {\n  var point_index = _.indexOf(series, point);\n  var nearestRight;\n  for (var i = point_index; i < series.length; i++) {\n    if (series[i][0] !== null) {\n      return series[i];\n    }\n  }\n  return nearestRight;\n}\n\nfunction findNearestLeft(series, point) {\n  var point_index = _.indexOf(series, point);\n  var nearestLeft;\n  for (var i = point_index; i > 0; i--) {\n    if (series[i][0] !== null) {\n      return series[i];\n    }\n  }\n  return nearestLeft;\n}\n"]}