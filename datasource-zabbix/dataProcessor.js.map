{"version":3,"sources":["../../src/datasource-zabbix/dataProcessor.js"],"names":[],"mappings":"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","file":"dataProcessor.js","sourcesContent":["import _ from 'lodash';\nimport * as utils from './utils';\n\n/**\n * Downsample datapoints series\n */\nfunction downsampleSeries(datapoints, time_to, ms_interval, func) {\n  var downsampledSeries = [];\n  var timeWindow = {\n    from: time_to * 1000 - ms_interval,\n    to: time_to * 1000\n  };\n\n  var points_sum = 0;\n  var points_num = 0;\n  var value_avg = 0;\n  var frame = [];\n\n  for (var i = datapoints.length - 1; i >= 0; i -= 1) {\n    if (timeWindow.from < datapoints[i][1] && datapoints[i][1] <= timeWindow.to) {\n      points_sum += datapoints[i][0];\n      points_num++;\n      frame.push(datapoints[i][0]);\n    }\n    else {\n      value_avg = points_num ? points_sum / points_num : 0;\n\n      if (func === \"max\") {\n        downsampledSeries.push([_.max(frame), timeWindow.to]);\n      }\n      else if (func === \"min\") {\n        downsampledSeries.push([_.min(frame), timeWindow.to]);\n      }\n\n      // avg by default\n      else {\n        downsampledSeries.push([value_avg, timeWindow.to]);\n      }\n\n      // Shift time window\n      timeWindow.to = timeWindow.from;\n      timeWindow.from -= ms_interval;\n\n      points_sum = 0;\n      points_num = 0;\n      frame = [];\n\n      // Process point again\n      i++;\n    }\n  }\n  return downsampledSeries.reverse();\n}\n\n/**\n * Group points by given time interval\n * datapoints: [[<value>, <unixtime>], ...]\n */\nfunction groupBy(interval, groupByCallback, datapoints) {\n  var ms_interval = utils.parseInterval(interval);\n\n  // Calculate frame timestamps\n  var frames = _.groupBy(datapoints, function(point) {\n    // Calculate time for group of points\n    return Math.floor(point[1] / ms_interval) * ms_interval;\n  });\n\n  // frame: { '<unixtime>': [[<value>, <unixtime>], ...] }\n  // return [{ '<unixtime>': <value> }, { '<unixtime>': <value> }, ...]\n  var grouped = _.mapValues(frames, function(frame) {\n    var points = _.map(frame, function(point) {\n      return point[0];\n    });\n    return groupByCallback(points);\n  });\n\n  // Convert points to Grafana format\n  return sortByTime(_.map(grouped, function(value, timestamp) {\n    return [Number(value), Number(timestamp)];\n  }));\n}\n\nfunction sumSeries(timeseries) {\n\n  // Calculate new points for interpolation\n  var new_timestamps = _.uniq(_.map(_.flatten(timeseries, true), function(point) {\n    return point[1];\n  }));\n  new_timestamps = _.sortBy(new_timestamps);\n\n  var interpolated_timeseries = _.map(timeseries, function(series) {\n    var timestamps = _.map(series, function(point) {\n      return point[1];\n    });\n    var new_points = _.map(_.difference(new_timestamps, timestamps), function(timestamp) {\n      return [null, timestamp];\n    });\n    var new_series = series.concat(new_points);\n    return sortByTime(new_series);\n  });\n\n  _.each(interpolated_timeseries, interpolateSeries);\n\n  var new_timeseries = [];\n  var sum;\n  for (var i = new_timestamps.length - 1; i >= 0; i--) {\n    sum = 0;\n    for (var j = interpolated_timeseries.length - 1; j >= 0; j--) {\n      sum += interpolated_timeseries[j][i][0];\n    }\n    new_timeseries.push([sum, new_timestamps[i]]);\n  }\n\n  return sortByTime(new_timeseries);\n}\n\nfunction limit(order, n, orderByFunc, timeseries) {\n  let orderByCallback = aggregationFunctions[orderByFunc];\n  let sortByIteratee = (ts) => {\n    let values = _.map(ts.datapoints, (point) => {\n      return point[0];\n    });\n    return orderByCallback(values);\n  };\n  let sortedTimeseries = _.sortBy(timeseries, sortByIteratee);\n  if (order === 'bottom') {\n    return sortedTimeseries.slice(0, n);\n  } else {\n    return sortedTimeseries.slice(-n);\n  }\n}\n\nfunction AVERAGE(values) {\n  var sum = 0;\n  _.each(values, function(value) {\n    sum += value;\n  });\n  return sum / values.length;\n}\n\nfunction MIN(values) {\n  return _.min(values);\n}\n\nfunction MAX(values) {\n  return _.max(values);\n}\n\nfunction MEDIAN(values) {\n  var sorted = _.sortBy(values);\n  return sorted[Math.floor(sorted.length / 2)];\n}\n\nfunction setAlias(alias, timeseries) {\n  timeseries.target = alias;\n  return timeseries;\n}\n\nfunction scale(factor, datapoints) {\n  return _.map(datapoints, point => {\n    return [\n      point[0] * factor,\n      point[1]\n    ];\n  });\n}\n\nfunction delta(datapoints) {\n  let newSeries = [];\n  let deltaValue;\n  for (var i = 1; i < datapoints.length; i++) {\n    deltaValue = datapoints[i][0] - datapoints[i - 1][0];\n    newSeries.push([deltaValue, datapoints[i][1]]);\n  }\n  return newSeries;\n}\n\nfunction groupByWrapper(interval, groupFunc, datapoints) {\n  var groupByCallback = aggregationFunctions[groupFunc];\n  return groupBy(interval, groupByCallback, datapoints);\n}\n\nfunction aggregateByWrapper(interval, aggregateFunc, datapoints) {\n  // Flatten all points in frame and then just use groupBy()\n  var flattenedPoints = _.flatten(datapoints, true);\n  var groupByCallback = aggregationFunctions[aggregateFunc];\n  return groupBy(interval, groupByCallback, flattenedPoints);\n}\n\nfunction aggregateWrapper(groupByCallback, interval, datapoints) {\n  var flattenedPoints = _.flatten(datapoints, true);\n  return groupBy(interval, groupByCallback, flattenedPoints);\n}\n\nfunction sortByTime(series) {\n  return _.sortBy(series, function(point) {\n    return point[1];\n  });\n}\n\n/**\n * Interpolate series with gaps\n */\nfunction interpolateSeries(series) {\n  var left, right;\n\n  // Interpolate series\n  for (var i = series.length - 1; i >= 0; i--) {\n    if (!series[i][0]) {\n      left = findNearestLeft(series, series[i]);\n      right = findNearestRight(series, series[i]);\n      if (!left) {\n        left = right;\n      }\n      if (!right) {\n        right = left;\n      }\n      series[i][0] = linearInterpolation(series[i][1], left, right);\n    }\n  }\n  return series;\n}\n\nfunction linearInterpolation(timestamp, left, right) {\n  if (left[1] === right[1]) {\n    return (left[0] + right[0]) / 2;\n  } else {\n    return (left[0] + (right[0] - left[0]) / (right[1] - left[1]) * (timestamp - left[1]));\n  }\n}\n\nfunction findNearestRight(series, point) {\n  var point_index = _.indexOf(series, point);\n  var nearestRight;\n  for (var i = point_index; i < series.length; i++) {\n    if (series[i][0] !== null) {\n      return series[i];\n    }\n  }\n  return nearestRight;\n}\n\nfunction findNearestLeft(series, point) {\n  var point_index = _.indexOf(series, point);\n  var nearestLeft;\n  for (var i = point_index; i > 0; i--) {\n    if (series[i][0] !== null) {\n      return series[i];\n    }\n  }\n  return nearestLeft;\n}\n\nfunction timeShift(interval, range) {\n  let shift = utils.parseTimeShiftInterval(interval) / 1000;\n  return range.map(time => {\n    return time - shift;\n  });\n}\n\nfunction unShiftTimeSeries(interval, datapoints) {\n  let unshift = utils.parseTimeShiftInterval(interval);\n  return datapoints.map(dp => {\n    return [\n      dp[0],\n      dp[1] + unshift\n    ];\n  });\n}\n\nlet metricFunctions = {\n  groupBy: groupByWrapper,\n  scale: scale,\n  delta: delta,\n  aggregateBy: aggregateByWrapper,\n  average: _.partial(aggregateWrapper, AVERAGE),\n  min: _.partial(aggregateWrapper, MIN),\n  max: _.partial(aggregateWrapper, MAX),\n  median: _.partial(aggregateWrapper, MEDIAN),\n  sumSeries: sumSeries,\n  top: _.partial(limit, 'top'),\n  bottom: _.partial(limit, 'bottom'),\n  timeShift: timeShift,\n  setAlias: setAlias\n};\n\nlet aggregationFunctions = {\n  avg: AVERAGE,\n  min: MIN,\n  max: MAX,\n  median: MEDIAN\n};\n\nexport default {\n  downsampleSeries: downsampleSeries,\n  groupBy: groupBy,\n  AVERAGE: AVERAGE,\n  MIN: MIN,\n  MAX: MAX,\n  MEDIAN: MEDIAN,\n  unShiftTimeSeries: unShiftTimeSeries,\n\n  get aggregationFunctions() {\n    return aggregationFunctions;\n  },\n\n  get metricFunctions() {\n    return metricFunctions;\n  }\n};\n"]}