{"version":3,"sources":["../../src/datasource-zabbix/datasource.js"],"names":[],"mappings":";;;;;;;;;;;AAuaA,WAAS,gBAAT,CAA0B,YAA1B,EAAwC,QAAxC,EAAkD;AAChD,QAAI,uBAAuB,EAAE,GAAF,CAAM,gBAAgB,aAAhB,GAAgC,QAAhC,CAAN,EAAiD,MAAjD,CAA3B;AACA,QAAI,cAAc,EAAE,MAAF,CAAS,YAAT,EAAuB,UAAS,IAAT,EAAe;AACtD,aAAO,EAAE,QAAF,CAAW,oBAAX,EAAiC,KAAK,GAAL,CAAS,IAA1C,CAAP;AACD,KAFiB,CAAlB;;AAIA,WAAO,EAAE,GAAF,CAAM,WAAN,EAAmB,UAAS,IAAT,EAAe;AACvC,UAAI,eAAe,gBAAgB,kBAAhB,CAAmC,KAAK,GAAxC,EAA6C,KAAK,MAAlD,CAAnB;AACA,aAAO,aAAa,YAAb,CAA0B,cAAc,eAAxC,CAAP;AACD,KAHM,CAAP;AAID;;AAED,WAAS,kBAAT,CAA4B,KAA5B,EAAmC,QAAnC,EAA6C;AAC3C,QAAI,gBAAgB,EAAE,GAAF,CAAM,gBAAgB,aAAhB,GAAgC,QAAhC,CAAN,CAApB;AACA,WAAO,EAAE,MAAF,CAAS,KAAT,EAAgB,gBAAQ;AAC7B,aAAO,EAAE,QAAF,CAAW,aAAX,EAA0B,KAAK,GAAL,CAAS,IAAnC,CAAP;AACD,KAFM,CAAP;AAGD;;AAED,WAAS,YAAT,CAAsB,SAAtB,EAAiC;AAC/B,WAAO;AACL,YAAM,UAAU,IADX;AAEL,kBAAY;AAFP,KAAP;AAID;;;;;;;;;;;;AAYD,WAAS,oBAAT,CAA8B,KAA9B,EAAqC,QAArC,EAA+C;AAC7C,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAO,MAAM,WAAN,CAAkB,KAAlB,CAAP;AACD;;AAED,QAAI,gBAAgB,EAAE,GAAF,CAAM,KAAN,EAAa,MAAM,WAAnB,CAApB;AACA,WAAO,MAAM,cAAc,IAAd,CAAmB,GAAnB,CAAN,GAAgC,GAAvC;AACD;;;;;;;;;AASD,WAAS,mBAAT,CAA6B,WAA7B,EAA0C,MAA1C,EAAkD,UAAlD,EAA8D;AAC5D,QAAI,iBAAiB,YAAY,OAAZ,CAAoB,MAApB,EAA4B,UAA5B,EAAwC,oBAAxC,CAArB;AACA,QAAI,WAAW,cAAX,IAA6B,CAAC,MAAM,YAAN,CAAmB,IAAnB,CAAwB,cAAxB,CAAlC,EAA2E;AACzE,uBAAiB,OAAO,cAAP,GAAwB,IAAzC;AACD;AACD,WAAO,cAAP;AACD;;AAED,WAAS,WAAT,CAAqB,GAArB,EAA0B,OAA1B,EAAmC,gBAAnC,EAAqD;AACnD,QAAI,iBAAiB,IAAI,MAAJ,CAAW,OAAX,CAArB;AACA,QAAI,iBAAiB,eAAe,IAAf,CAAoB,GAApB,CAArB;AACA,QAAI,cAAJ,EAAoB;AAClB,UAAI,gBAAJ,EAAsB;AACpB,yBAAiB,eAAe,CAAf,CAAjB;AACD,OAFD,MAEO;AACL,yBAAiB,eAAe,CAAf,CAAjB;AACD;AACF;AACD,WAAO,cAAP;AACD;;;;AAID,WAAS,QAAT,CAAkB,UAAlB,EAA8B;AAC5B,WAAO,UAAS,MAAT,EAAiB;AACtB,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,WAAW,MAA/B,EAAuC,GAAvC,EAA4C;AAC1C,iBAAS,WAAW,CAAX,EAAc,IAAd,CAAmB,IAAnB,EAAyB,MAAzB,CAAT;AACD;AACD,aAAO,MAAP;AACD,KALD;AAMD;;;AAxfM,O;;AACK,c;;AACA,W;;AACA,gB;;AACA,qB;;AACL,mB;;;;;;;;;;;;;;;;;;;;;qCAKM,mB;;;;AAGX,qCAAY,gBAAZ,EAA8B,EAA9B,EAAkC,WAAlC,EAA+C,QAA/C,EAAyD,gBAAzD,EAA2E,kBAA3E,EAA+F,cAA/F,EAA+G;AAAA;;;AAG7G,eAAK,IAAL,GAAwB,iBAAiB,IAAzC;AACA,eAAK,GAAL,GAAwB,iBAAiB,GAAzC;AACA,eAAK,SAAL,GAAwB,iBAAiB,SAAzC;AACA,eAAK,eAAL,GAAwB,iBAAiB,eAAzC;;;AAGA,eAAK,QAAL,GAAwB,iBAAiB,QAAjB,CAA0B,QAAlD;AACA,eAAK,QAAL,GAAwB,iBAAiB,QAAjB,CAA0B,QAAlD;;;AAGA,eAAK,MAAL,GAAwB,iBAAiB,QAAjB,CAA0B,MAAlD;AACA,eAAK,UAAL,GAAwB,iBAAiB,QAAjB,CAA0B,UAA1B,IAAwC,IAAhE;;;AAGA,cAAI,MAAM,iBAAiB,QAAjB,CAA0B,QAA1B,IAAsC,IAAhD;AACA,eAAK,QAAL,GAAgB,MAAM,aAAN,CAAoB,GAApB,CAAhB;;;AAGA,cAAI,YAAY,gBAAhB;AACA,eAAK,SAAL,GAAiB,IAAI,SAAJ,CAAc,KAAK,GAAnB,EAAwB,KAAK,QAA7B,EAAuC,KAAK,QAA5C,EAAsD,KAAK,SAA3D,EAAsE,KAAK,eAA3E,CAAjB;;;AAGA,eAAK,WAAL,GAAmB,IAAI,kBAAJ,CAAuB,KAAK,SAA5B,EAAuC,KAAK,QAA5C,CAAnB;;;AAGA,eAAK,cAAL,GAAsB,IAAI,cAAJ,CAAmB,KAAK,WAAxB,CAAtB;;;AAGA,eAAK,CAAL,GAAS,EAAT;AACA,eAAK,WAAL,GAAmB,WAAnB;AACA,eAAK,QAAL,GAAgB,QAAhB;;;AAGA,eAAK,mBAAL,GAA2B,EAAE,OAAF,CAAU,mBAAV,EAA+B,KAAK,WAApC,CAA3B;AACD;;;;;;;;;;;;;;;gCAWK,O,EAAS;AAAA;;AACb,gBAAI,WAAW,KAAK,IAAL,CAAU,SAAS,KAAT,CAAe,QAAQ,KAAR,CAAc,IAA7B,IAAqC,IAA/C,CAAf;AACA,gBAAI,SAAS,KAAK,IAAL,CAAU,SAAS,KAAT,CAAe,QAAQ,KAAR,CAAc,EAA7B,IAAmC,IAA7C,CAAb;;AAEA,gBAAI,gBAAgB,KAAK,IAAL,CAAU,SAAS,KAAT,CAAe,SAAS,KAAK,UAA7B,IAA2C,IAArD,CAApB;AACA,gBAAI,YAAa,YAAY,aAAb,IAA+B,KAAK,MAApD;;;AAGA,gBAAI,WAAW,EAAE,GAAF,CAAM,QAAQ,OAAd,EAAuB,kBAAU;;;AAG9C,uBAAS,EAAE,SAAF,CAAY,MAAZ,CAAT;;AAEA,kBAAI,OAAO,IAAP,KAAgB,CAApB,EAAuB;;;AAGrB,yBAAS,WAAW,OAAX,CAAmB,MAAnB,CAAT;;;AAGA,oBAAI,OAAO,IAAP,IAAe,CAAC,OAAO,KAAvB,IAAgC,CAAC,OAAO,IAAxC,IAAgD,CAAC,OAAO,IAA5D,EAAkE;AAChE,yBAAO,EAAP;AACD;;;AAGD,uBAAO,KAAP,CAAa,MAAb,GAAsB,MAAK,mBAAL,CAAyB,OAAO,KAAP,CAAa,MAAtC,EAA8C,QAAQ,UAAtD,CAAtB;AACA,uBAAO,IAAP,CAAY,MAAZ,GAAqB,MAAK,mBAAL,CAAyB,OAAO,IAAP,CAAY,MAArC,EAA6C,QAAQ,UAArD,CAArB;AACA,uBAAO,WAAP,CAAmB,MAAnB,GAA4B,MAAK,mBAAL,CAAyB,OAAO,WAAP,CAAmB,MAA5C,EAAoD,QAAQ,UAA5D,CAA5B;AACA,uBAAO,IAAP,CAAY,MAAZ,GAAqB,MAAK,mBAAL,CAAyB,OAAO,IAAP,CAAY,MAArC,EAA6C,QAAQ,UAArD,CAArB;AACA,uBAAO,UAAP,GAAoB,MAAK,mBAAL,CAAyB,OAAO,UAAhC,EAA4C,QAAQ,UAApD,CAApB;;AAEA,kBAAE,OAAF,CAAU,OAAO,SAAjB,EAA4B,gBAAQ;AAClC,uBAAK,MAAL,GAAc,EAAE,GAAF,CAAM,KAAK,MAAX,EAAmB,iBAAS;AACxC,wBAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,6BAAO,CAAC,MAAK,WAAL,CAAiB,OAAjB,CAAyB,MAAM,QAAN,EAAzB,EAA2C,QAAQ,UAAnD,CAAR;AACD,qBAFD,MAEO;AACL,6BAAO,MAAK,WAAL,CAAiB,OAAjB,CAAyB,KAAzB,EAAgC,QAAQ,UAAxC,CAAP;AACD;AACF,mBANa,CAAd;AAOD,iBARD;;;AAWA,oBAAI,CAAC,OAAO,IAAR,IAAgB,OAAO,IAAP,KAAgB,CAApC,EAAuC;AACrC,yBAAO,MAAK,gBAAL,CAAsB,MAAtB,EAA8B,QAA9B,EAAwC,MAAxC,EAAgD,SAAhD,CAAP;AACD;;;AAFD,qBAKK,IAAI,OAAO,IAAP,KAAgB,CAApB,EAAuB;AAC1B,2BAAO,MAAK,aAAL,CAAmB,MAAnB,EAA2B,QAA3B,EAAqC,MAArC,CAAP;AACD;AACF;;;AApCD,mBAuCK,IAAI,OAAO,IAAP,KAAgB,CAApB,EAAuB;;AAE1B,sBAAI,OAAO,IAAP,IAAe,CAAC,OAAO,SAAvB,IAAoC,CAAC,OAAO,WAAhD,EAA6D;AAC3D,2BAAO,EAAP;AACD;;AAED,yBAAO,MAAK,SAAL,CACJ,MADI,CACG,OAAO,SAAP,CAAiB,SADpB,EAC+B,QAD/B,EACyC,MADzC,EAEJ,IAFI,CAEC,qBAAa;AACjB,2BAAO,MAAK,cAAL,CACJ,iBADI,CACc,OAAO,SADrB,EACgC,OAAO,WADvC,EACoD,SADpD,CAAP;AAED,mBALI,CAAP;AAMD;AACF,aAzDc,CAAf;;;AA4DA,mBAAO,KAAK,CAAL,CAAO,GAAP,CAAW,EAAE,OAAF,CAAU,QAAV,CAAX,EACJ,IADI,CACC,EAAE,OADH,EAEJ,IAFI,CAEC,2BAAmB;;;AAGvB,kBAAI,OAAO,EAAE,GAAF,CAAM,eAAN,EAAuB,sBAAc;AAC9C,oBAAI,WAAW,UAAX,CAAsB,MAAtB,GAA+B,QAAQ,aAA3C,EAA0D;AACxD,6BAAW,UAAX,GAAwB,cACrB,OADqB,CACb,QAAQ,QADK,EACK,cAAc,OADnB,EAC4B,WAAW,UADvC,CAAxB;AAED;AACD,uBAAO,UAAP;AACD,eANU,CAAX;AAOA,qBAAO,EAAE,MAAM,IAAR,EAAP;AACD,aAbI,CAAP;AAcD;;;2CAEgB,M,EAAQ,Q,EAAU,M,EAAQ,S,EAAW;AAAA;;;AAEpD,mBAAO,KAAK,cAAL,CAAoB,KAApB,CAA0B,OAAO,KAAP,CAAa,MAAvC,EAC0B,OAAO,IAAP,CAAY,MADtC,EAE0B,OAAO,WAAP,CAAmB,MAF7C,EAG0B,OAAO,IAAP,CAAY,MAHtC,EAI0B,KAJ1B,EAKJ,IALI,CAKC,iBAAS;;AAEb,kBAAI,cAAc,MAAM,OAAN,CAAc,OAAO,IAAP,CAAY,MAA1B,CAAlB;AACA,kBAAI,UAAJ;;;AAGA,kBAAI,SAAJ,EAAe;;;AAGb,oBAAI,iBAAiB,EAAE,GAAF,CAAM,gBAAgB,aAAhB,GAAgC,QAAhC,CAAN,EAAiD,MAAjD,CAArB;AACA,oBAAI,iBAAiB,EAAE,IAAF,CAAO,OAAO,SAAd,EAAyB,gBAAQ;AACpD,yBAAO,EAAE,QAAF,CAAW,cAAX,EAA2B,KAAK,GAAL,CAAS,IAApC,CAAP;AACD,iBAFoB,CAArB;AAGA,oBAAI,YAAY,iBAAiB,eAAe,MAAf,CAAsB,CAAtB,CAAjB,GAA4C,KAA5D;;AAEA,6BAAa,OAAK,SAAL,CACV,QADU,CACD,KADC,EACM,QADN,EACgB,MADhB,EAEV,IAFU,CAEL,mBAAW;AACf,yBAAO,OAAK,cAAL,CAAoB,YAApB,CAAiC,OAAjC,EAA0C,KAA1C,EAAiD,WAAjD,EAA8D,SAA9D,CAAP;AACD,iBAJU,CAAb;AAKD;;;AAdD,mBAiBK;AACH,+BAAa,OAAK,WAAL,CACV,UADU,CACC,KADD,EACQ,QADR,EACkB,MADlB,EAEV,IAFU,CAEL,mBAAW;AACf,2BAAO,OAAK,cAAL,CAAoB,aAApB,CAAkC,OAAlC,EAA2C,KAA3C,EAAkD,WAAlD,CAAP;AACD,mBAJU,CAAb;AAKD;;AAED,qBAAO,WAAW,IAAX,CAAgB,2BAAmB;AACxC,oBAAI,qBAAuB,iBAAiB,OAAO,SAAxB,EAAmC,WAAnC,CAA3B;AACA,oBAAI,uBAAuB,iBAAiB,OAAO,SAAxB,EAAmC,WAAnC,CAA3B;AACA,oBAAI,kBAAuB,iBAAiB,OAAO,SAAxB,EAAmC,QAAnC,CAA3B;AACA,oBAAI,iBAAuB,iBAAiB,OAAO,SAAxB,EAAmC,OAAnC,CAA3B;;;AAGA,kCAAkB,EAAE,GAAF,CAAM,eAAN,EAAuB,sBAAc;AACrD,6BAAW,UAAX,GAAwB,SAAS,kBAAT,EAA6B,WAAW,UAAxC,CAAxB;AACA,yBAAO,UAAP;AACD,iBAHiB,CAAlB;;;AAMA,oBAAI,gBAAgB,MAApB,EAA4B;AAC1B,oCAAkB,SAAS,eAAT,EAA0B,eAA1B,CAAlB;AACD;;;AAGD,oBAAI,qBAAqB,MAAzB,EAAiC;AAAA;AAC/B,wBAAI,KAAK,EAAE,GAAF,CAAM,eAAN,EAAuB,YAAvB,CAAT;AACA,yBAAK,SAAS,oBAAT,EAA+B,EAA/B,CAAL;;AAEA,wBAAI,eAAe,EAAE,GAAF,CAAM,gBAAgB,aAAhB,GAAgC,WAAhC,CAAN,EAAoD,MAApD,CAAnB;AACA,wBAAI,UAAU,EAAE,QAAF,CAAW,OAAO,SAAlB,EAA6B,gBAAQ;AACjD,6BAAO,EAAE,QAAF,CAAW,YAAX,EAAyB,KAAK,GAAL,CAAS,IAAlC,CAAP;AACD,qBAFa,CAAd;;AAIA,sCAAkB,CAChB;AACE,8BAAQ,QAAQ,IADlB;AAEE,kCAAY;AAFd,qBADgB,CAAlB;AAT+B;AAehC;;;AAGD,kBAAE,IAAF,CAAO,eAAP,EAAwB,SAAS,cAAT,CAAxB;;AAEA,uBAAO,eAAP;AACD,eAvCM,CAAP;AAwCD,aA5EI,CAAP;AA6ED;;;wCAEa,M,EAAQ,Q,EAAU,M,EAAQ;AAAA;;AACtC,mBAAO,KAAK,cAAL,CAAoB,KAApB,CAA0B,OAAO,KAAP,CAAa,MAAvC,EAC0B,OAAO,IAAP,CAAY,MADtC,EAE0B,OAAO,WAAP,CAAmB,MAF7C,EAG0B,OAAO,IAAP,CAAY,MAHtC,EAI0B,MAJ1B,EAKJ,IALI,CAKC,iBAAS;AACb,kBAAI,MAAM,MAAV,EAAkB;AAChB,uBAAO,OAAK,SAAL,CAAe,UAAf,CAA0B,KAA1B,EAAiC,QAAjC,EAA2C,MAA3C,EACJ,IADI,CACC,mBAAW;AACf,yBAAO,OAAK,cAAL,CAAoB,cAApB,CAAmC,OAAnC,EAA4C,KAA5C,EAAmD,KAAnD,EAA0D,UAAC,KAAD,EAAW;AAC1E,wBAAI,QAAQ,MAAM,KAAlB;;;AAGA,wBAAI,OAAO,UAAX,EAAuB;AACrB,8BAAQ,YAAY,MAAM,KAAlB,EAAyB,OAAO,UAAhC,EAA4C,OAAO,gBAAnD,CAAR;AACD;;AAED,2BAAO,CAAC,KAAD,EAAQ,MAAM,KAAN,GAAc,IAAtB,CAAP;AACD,mBATM,CAAP;AAUD,iBAZI,CAAP;AAaD,eAdD,MAcO;AACL,uBAAO,OAAK,CAAL,CAAO,IAAP,CAAY,EAAZ,CAAP;AACD;AACF,aAvBI,CAAP;AAwBD;;;2CAMgB;AACf,gBAAI,OAAO,IAAX;AACA,mBAAO,KAAK,SAAL,CAAe,UAAf,GACJ,IADI,CACC,mBAAW;AACf,qBAAO,KAAK,SAAL,CAAe,KAAf,GACJ,IADI,CACC,gBAAQ;AACZ,oBAAI,IAAJ,EAAU;AACR,yBAAO;AACL,4BAAQ,SADH;AAEL,2BAAO,SAFF;AAGL,6BAAS,yBAAyB;AAH7B,mBAAP;AAKD,iBAND,MAMO;AACL,yBAAO;AACL,4BAAQ,OADH;AAEL,2BAAO,+BAFF;AAGL,6BAAS,yBAAyB;AAH7B,mBAAP;AAKD;AACF,eAfI,EAeF,iBAAS;AACV,uBAAO;AACL,0BAAQ,OADH;AAEL,yBAAO,MAAM,OAFR;AAGL,2BAAS,MAAM;AAHV,iBAAP;AAKD,eArBI,CAAP;AAsBD,aAxBI,EAwBF,iBAAS;AACV,sBAAQ,GAAR,CAAY,KAAZ;AACA,qBAAO;AACL,wBAAQ,OADH;AAEL,uBAAO,mBAFF;AAGL,yBAAS;AAHJ,eAAP;AAKD,aA/BI,CAAP;AAgCD;;;0CAae,K,EAAO;AAAA;;AACrB,gBAAI,eAAJ;AACA,gBAAI,QAAQ,EAAZ;;;AAGA,cAAE,IAAF,CAAO,MAAM,KAAN,CAAY,GAAZ,CAAP,EAAyB,gBAAQ;AAC/B,qBAAO,OAAK,mBAAL,CAAyB,IAAzB,EAA+B,EAA/B,CAAP;;;AAGA,kBAAI,SAAS,GAAb,EAAkB;AAChB,uBAAO,MAAP;AACD;AACD,oBAAM,IAAN,CAAW,IAAX;AACD,aARD;AASA,gBAAI,WAAW,EAAE,SAAF,CAAY,CAAC,OAAD,EAAU,MAAV,EAAkB,KAAlB,EAAyB,MAAzB,CAAZ,EAA8C,KAA9C,CAAf;;;AAGA,gBAAI,MAAM,MAAN,KAAiB,CAArB,EAAwB;;AAEtB,kBAAI,SAAS,GAAT,KAAiB,MAArB,EAA6B;AAC3B,yBAAS,GAAT,GAAe,EAAf;AACD;AACD,uBAAS,KAAK,cAAL,CAAoB,QAApB,CAA6B,SAAS,KAAtC,EAA6C,SAAS,IAAtD,EAA4D,SAAS,GAArE,CAAT;AACD,aAND,MAMO,IAAI,MAAM,MAAN,KAAiB,CAArB,EAAwB;;AAE7B,uBAAS,KAAK,cAAL,CAAoB,OAApB,CAA4B,SAAS,KAArC,EAA4C,SAAS,IAArD,CAAT;AACD,aAHM,MAGA,IAAI,MAAM,MAAN,KAAiB,CAArB,EAAwB;;AAE7B,uBAAS,KAAK,cAAL,CAAoB,QAApB,CAA6B,SAAS,KAAtC,CAAT;AACD,aAHM,MAGA,IAAI,MAAM,MAAN,KAAiB,CAArB,EAAwB;;AAE7B,uBAAS,KAAK,WAAL,CAAiB,SAAjB,CAA2B,SAAS,KAApC,CAAT;AACD,aAHM,MAGA;AACL,uBAAS,KAAK,CAAL,CAAO,IAAP,CAAY,EAAZ,CAAT;AACD;;AAED,mBAAO,OAAO,IAAP,CAAY,mBAAW;AAC5B,qBAAO,EAAE,GAAF,CAAM,OAAN,EAAe,YAAf,CAAP;AACD,aAFM,CAAP;AAGD;;;0CAMe,O,EAAS;AACvB,gBAAI,WAAW,KAAK,IAAL,CAAU,SAAS,KAAT,CAAe,QAAQ,QAAR,CAAiB,IAAhC,IAAwC,IAAlD,CAAf;AACA,gBAAI,SAAS,KAAK,IAAL,CAAU,SAAS,KAAT,CAAe,QAAQ,QAAR,CAAiB,EAAhC,IAAsC,IAAhD,CAAb;AACA,gBAAI,aAAa,QAAQ,UAAzB;AACA,gBAAI,eAAe,WAAW,YAAX,GAA0B,CAAC,CAAD,EAAI,CAAJ,CAA1B,GAAmC,CAAtD;;;AAGA,gBAAI,eAAe,CAAC,CAAD,EAAI,CAAJ,CAAnB;;AAEA,gBAAI,aAAa,KAAK,cAAL,CACd,iBADc,CACI,KAAK,mBAAL,CAAyB,WAAW,KAApC,EAA2C,EAA3C,CADJ,EAEI,KAAK,mBAAL,CAAyB,WAAW,IAApC,EAA0C,EAA1C,CAFJ,EAGI,KAAK,mBAAL,CAAyB,WAAW,WAApC,EAAiD,EAAjD,CAHJ,CAAjB;AAIA,gBAAI,OAAO,IAAX;AACA,mBAAO,WAAW,IAAX,CAAgB,iBAAS;AAC9B,qBAAO,KAAK,SAAL,CACJ,WADI,CACQ,MAAM,QADd,EACwB,MAAM,OAD9B,EACuC,MAAM,cAD7C,EAEQ,YAFR,EAEsB,QAFtB,EAEgC,MAFhC,EAGJ,IAHI,CAGC,oBAAY;;;AAGhB,oBAAI,MAAM,OAAN,CAAc,WAAW,OAAzB,CAAJ,EAAuC;AACrC,6BAAW,EAAE,MAAF,CAAS,QAAT,EAAmB,mBAAW;AACvC,2BAAO,MAAM,UAAN,CAAiB,WAAW,OAA5B,EAAqC,IAArC,CAA0C,QAAQ,WAAlD,CAAP;AACD,mBAFU,CAAX;AAGD,iBAJD,MAIO,IAAI,WAAW,OAAf,EAAwB;AAC7B,6BAAW,EAAE,MAAF,CAAS,QAAT,EAAmB,mBAAW;AACvC,2BAAO,QAAQ,WAAR,KAAwB,WAAW,OAA1C;AACD,mBAFU,CAAX;AAGD;;;AAGD,2BAAW,EAAE,MAAF,CAAS,QAAT,EAAmB,mBAAW;AACvC,yBAAO,OAAO,QAAQ,QAAf,KAA4B,OAAO,WAAW,WAAlB,CAAnC;AACD,iBAFU,CAAX;;AAIA,oBAAI,YAAY,EAAE,GAAF,CAAM,QAAN,EAAgB,WAAhB,CAAhB;AACA,uBAAO,KAAK,SAAL,CACJ,SADI,CACM,SADN,EACiB,QADjB,EAC2B,MAD3B,EACmC,YADnC,EAEJ,IAFI,CAEC,kBAAU;AACd,sBAAI,kBAAkB,EAAE,OAAF,CAAU,QAAV,EAAoB,WAApB,CAAtB;;;AAGA,sBAAI,WAAW,gBAAf,EAAiC;AAC/B,6BAAS,EAAE,MAAF,CAAS,MAAT,EAAiB,iBAAS;AACjC,6BAAO,CAAC,MAAM,YAAN,CAAmB,MAA3B;AACD,qBAFQ,CAAT;AAGD;;AAED,yBAAO,EAAE,GAAF,CAAM,MAAN,EAAc,iBAAS;AAC5B,wBAAI,QAAO,EAAX;AACA,wBAAI,WAAW,YAAf,EAA6B;AAC3B,+BAAS,MAAM,KAAN,CAAY,CAAZ,EAAe,IAAf,GAAsB,IAA/B;AACD;;;AAGD,6BAAS,OAAO,MAAM,KAAb,IAAsB,SAAtB,GAAkC,IAA3C;;AAEA,wBAAI,yBAAyB,MAAM,kBAAN,CAAyB,MAAM,YAA/B,CAA7B;AACA,2BAAO;AACL,kCAAY,UADP;AAEL,4BAAM,MAAM,KAAN,GAAc,IAFf;AAGL,6BAAO,KAHF;AAIL,4BAAM,gBAAgB,MAAM,QAAtB,EAAgC,WAAhC,GAA8C;AAJ/C,qBAAP;AAMD,mBAhBM,CAAP;AAiBD,iBA7BI,CAAP;AA8BD,eApDI,CAAP;AAqDD,aAtDM,CAAP;AAuDD","file":"datasource.js","sourcesContent":["//import angular from 'angular';\nimport _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\nimport * as utils from './utils';\nimport * as migrations from './migrations';\nimport * as metricFunctions from './metricFunctions';\nimport DataProcessor from './DataProcessor';\nimport './zabbixAPI.service.js';\nimport './zabbixCache.service.js';\nimport './queryProcessor.service.js';\n\nexport class ZabbixAPIDatasource {\n\n  /** @ngInject */\n  constructor(instanceSettings, $q, templateSrv, alertSrv, zabbixAPIService, ZabbixCachingProxy, QueryProcessor) {\n\n    // General data source settings\n    this.name             = instanceSettings.name;\n    this.url              = instanceSettings.url;\n    this.basicAuth        = instanceSettings.basicAuth;\n    this.withCredentials  = instanceSettings.withCredentials;\n\n    // Zabbix API credentials\n    this.username         = instanceSettings.jsonData.username;\n    this.password         = instanceSettings.jsonData.password;\n\n    // Use trends instead history since specified time\n    this.trends           = instanceSettings.jsonData.trends;\n    this.trendsFrom       = instanceSettings.jsonData.trendsFrom || '7d';\n\n    // Set cache update interval\n    var ttl = instanceSettings.jsonData.cacheTTL || '1h';\n    this.cacheTTL = utils.parseInterval(ttl);\n\n    // Initialize Zabbix API\n    var ZabbixAPI = zabbixAPIService;\n    this.zabbixAPI = new ZabbixAPI(this.url, this.username, this.password, this.basicAuth, this.withCredentials);\n\n    // Initialize cache service\n    this.zabbixCache = new ZabbixCachingProxy(this.zabbixAPI, this.cacheTTL);\n\n    // Initialize query builder\n    this.queryProcessor = new QueryProcessor(this.zabbixCache);\n\n    // Dependencies\n    this.q = $q;\n    this.templateSrv = templateSrv;\n    this.alertSrv = alertSrv;\n\n    // Use custom format for template variables\n    this.replaceTemplateVars = _.partial(replaceTemplateVars, this.templateSrv);\n  }\n\n  ////////////////////////\n  // Datasource methods //\n  ////////////////////////\n\n  /**\n   * Query panel data. Calls for each panel in dashboard.\n   * @param  {Object} options   Contains time range, targets and other info.\n   * @return {Object} Grafana metrics object with timeseries data for each target.\n   */\n  query(options) {\n    var timeFrom = Math.ceil(dateMath.parse(options.range.from) / 1000);\n    var timeTo = Math.ceil(dateMath.parse(options.range.to) / 1000);\n\n    var useTrendsFrom = Math.ceil(dateMath.parse('now-' + this.trendsFrom) / 1000);\n    var useTrends = (timeFrom <= useTrendsFrom) && this.trends;\n\n    // Create request for each target\n    var promises = _.map(options.targets, target => {\n\n      // Prevent changes of original object\n      target = _.cloneDeep(target);\n\n      if (target.mode !== 1) {\n\n        // Migrate old targets\n        target = migrations.migrate(target);\n\n        // Don't request undefined and hidden targets\n        if (target.hide || !target.group || !target.host || !target.item) {\n          return [];\n        }\n\n        // Replace templated variables\n        target.group.filter = this.replaceTemplateVars(target.group.filter, options.scopedVars);\n        target.host.filter = this.replaceTemplateVars(target.host.filter, options.scopedVars);\n        target.application.filter = this.replaceTemplateVars(target.application.filter, options.scopedVars);\n        target.item.filter = this.replaceTemplateVars(target.item.filter, options.scopedVars);\n        target.textFilter = this.replaceTemplateVars(target.textFilter, options.scopedVars);\n\n        _.forEach(target.functions, func => {\n          func.params = _.map(func.params, param => {\n            if (typeof param === 'number') {\n              return +this.templateSrv.replace(param.toString(), options.scopedVars);\n            } else {\n              return this.templateSrv.replace(param, options.scopedVars);\n            }\n          });\n        });\n\n        // Query numeric data\n        if (!target.mode || target.mode === 0) {\n          return this.queryNumericData(target, timeFrom, timeTo, useTrends);\n        }\n\n        // Query text data\n        else if (target.mode === 2) {\n          return this.queryTextData(target, timeFrom, timeTo);\n        }\n      }\n\n      // IT services mode\n      else if (target.mode === 1) {\n        // Don't show undefined and hidden targets\n        if (target.hide || !target.itservice || !target.slaProperty) {\n          return [];\n        }\n\n        return this.zabbixAPI\n          .getSLA(target.itservice.serviceid, timeFrom, timeTo)\n          .then(slaObject => {\n            return this.queryProcessor\n              .handleSLAResponse(target.itservice, target.slaProperty, slaObject);\n          });\n      }\n    });\n\n    // Data for panel (all targets)\n    return this.q.all(_.flatten(promises))\n      .then(_.flatten)\n      .then(timeseries_data => {\n\n        // Series downsampling\n        var data = _.map(timeseries_data, timeseries => {\n          if (timeseries.datapoints.length > options.maxDataPoints) {\n            timeseries.datapoints = DataProcessor\n              .groupBy(options.interval, DataProcessor.AVERAGE, timeseries.datapoints);\n          }\n          return timeseries;\n        });\n        return { data: data };\n      });\n  }\n\n  queryNumericData(target, timeFrom, timeTo, useTrends) {\n    // Build query in asynchronous manner\n    return this.queryProcessor.build(target.group.filter,\n                                     target.host.filter,\n                                     target.application.filter,\n                                     target.item.filter,\n                                     'num')\n      .then(items => {\n        // Add hostname for items from multiple hosts\n        var addHostName = utils.isRegex(target.host.filter);\n        var getHistory;\n\n        // Use trends\n        if (useTrends) {\n\n          // Find trendValue() function and get specified trend value\n          var trendFunctions = _.map(metricFunctions.getCategories()['Trends'], 'name');\n          var trendValueFunc = _.find(target.functions, func => {\n            return _.includes(trendFunctions, func.def.name);\n          });\n          var valueType = trendValueFunc ? trendValueFunc.params[0] : \"avg\";\n\n          getHistory = this.zabbixAPI\n            .getTrend(items, timeFrom, timeTo)\n            .then(history => {\n              return this.queryProcessor.handleTrends(history, items, addHostName, valueType);\n            });\n        }\n\n        // Use history\n        else {\n          getHistory = this.zabbixCache\n            .getHistory(items, timeFrom, timeTo)\n            .then(history => {\n              return this.queryProcessor.handleHistory(history, items, addHostName);\n            });\n        }\n\n        return getHistory.then(timeseries_data => {\n          let transformFunctions   = bindFunctionDefs(target.functions, 'Transform');\n          let aggregationFunctions = bindFunctionDefs(target.functions, 'Aggregate');\n          let filterFunctions      = bindFunctionDefs(target.functions, 'Filter');\n          let aliasFunctions       = bindFunctionDefs(target.functions, 'Alias');\n\n          // Apply transformation functions\n          timeseries_data = _.map(timeseries_data, timeseries => {\n            timeseries.datapoints = sequence(transformFunctions)(timeseries.datapoints);\n            return timeseries;\n          });\n\n          // Apply filter functions\n          if (filterFunctions.length) {\n            timeseries_data = sequence(filterFunctions)(timeseries_data);\n          }\n\n          // Apply aggregations\n          if (aggregationFunctions.length) {\n            let dp = _.map(timeseries_data, 'datapoints');\n            dp = sequence(aggregationFunctions)(dp);\n\n            let aggFuncNames = _.map(metricFunctions.getCategories()['Aggregate'], 'name');\n            let lastAgg = _.findLast(target.functions, func => {\n              return _.includes(aggFuncNames, func.def.name);\n            });\n\n            timeseries_data = [\n              {\n                target: lastAgg.text,\n                datapoints: dp\n              }\n            ];\n          }\n\n          // Apply alias functions\n          _.each(timeseries_data, sequence(aliasFunctions));\n\n          return timeseries_data;\n        });\n      });\n  }\n\n  queryTextData(target, timeFrom, timeTo) {\n    return this.queryProcessor.build(target.group.filter,\n                                     target.host.filter,\n                                     target.application.filter,\n                                     target.item.filter,\n                                     'text')\n      .then(items => {\n        if (items.length) {\n          return this.zabbixAPI.getHistory(items, timeFrom, timeTo)\n            .then(history => {\n              return this.queryProcessor.convertHistory(history, items, false, (point) => {\n                let value = point.value;\n\n                // Regex-based extractor\n                if (target.textFilter) {\n                  value = extractText(point.value, target.textFilter, target.useCaptureGroups);\n                }\n\n                return [value, point.clock * 1000];\n              });\n            });\n        } else {\n          return this.q.when([]);\n        }\n      });\n  }\n\n  /**\n   * Test connection to Zabbix API\n   * @return {object} Connection status and Zabbix API version\n   */\n  testDatasource() {\n    var self = this;\n    return this.zabbixAPI.getVersion()\n      .then(version => {\n        return self.zabbixAPI.login()\n          .then(auth => {\n            if (auth) {\n              return {\n                status: \"success\",\n                title: \"Success\",\n                message: \"Zabbix API version: \" + version\n              };\n            } else {\n              return {\n                status: \"error\",\n                title: \"Invalid user name or password\",\n                message: \"Zabbix API version: \" + version\n              };\n            }\n          }, error => {\n            return {\n              status: \"error\",\n              title: error.message,\n              message: error.data\n            };\n          });\n      }, error => {\n        console.log(error);\n        return {\n          status: \"error\",\n          title: \"Connection failed\",\n          message: \"Could not connect to given url\"\n        };\n      });\n  }\n\n  ////////////////\n  // Templating //\n  ////////////////\n\n  /**\n   * Find metrics from templated request.\n   *\n   * @param  {string} query Query from Templating\n   * @return {string}       Metric name - group, host, app or item or list\n   *                        of metrics in \"{metric1,metcic2,...,metricN}\" format.\n   */\n  metricFindQuery(query) {\n    let result;\n    let parts = [];\n\n    // Split query. Query structure: group.host.app.item\n    _.each(query.split('.'), part => {\n      part = this.replaceTemplateVars(part, {});\n\n      // Replace wildcard to regex\n      if (part === '*') {\n        part = '/.*/';\n      }\n      parts.push(part);\n    });\n    let template = _.zipObject(['group', 'host', 'app', 'item'], parts);\n\n    // Get items\n    if (parts.length === 4) {\n      // Search for all items, even it's not belong to any application\n      if (template.app === '/.*/') {\n        template.app = '';\n      }\n      result = this.queryProcessor.getItems(template.group, template.host, template.app);\n    } else if (parts.length === 3) {\n      // Get applications\n      result = this.queryProcessor.getApps(template.group, template.host);\n    } else if (parts.length === 2) {\n      // Get hosts\n      result = this.queryProcessor.getHosts(template.group);\n    } else if (parts.length === 1) {\n      // Get groups\n      result = this.zabbixCache.getGroups(template.group);\n    } else {\n      result = this.q.when([]);\n    }\n\n    return result.then(metrics => {\n      return _.map(metrics, formatMetric);\n    });\n  }\n\n  /////////////////\n  // Annotations //\n  /////////////////\n\n  annotationQuery(options) {\n    var timeFrom = Math.ceil(dateMath.parse(options.rangeRaw.from) / 1000);\n    var timeTo = Math.ceil(dateMath.parse(options.rangeRaw.to) / 1000);\n    var annotation = options.annotation;\n    var showOkEvents = annotation.showOkEvents ? [0, 1] : 1;\n\n    // Show all triggers\n    var showTriggers = [0, 1];\n\n    var buildQuery = this.queryProcessor\n      .buildTriggerQuery(this.replaceTemplateVars(annotation.group, {}),\n                         this.replaceTemplateVars(annotation.host, {}),\n                         this.replaceTemplateVars(annotation.application, {}));\n    var self = this;\n    return buildQuery.then(query => {\n      return self.zabbixAPI\n        .getTriggers(query.groupids, query.hostids, query.applicationids,\n                     showTriggers, timeFrom, timeTo)\n        .then(triggers => {\n\n          // Filter triggers by description\n          if (utils.isRegex(annotation.trigger)) {\n            triggers = _.filter(triggers, trigger => {\n              return utils.buildRegex(annotation.trigger).test(trigger.description);\n            });\n          } else if (annotation.trigger) {\n            triggers = _.filter(triggers, trigger => {\n              return trigger.description === annotation.trigger;\n            });\n          }\n\n          // Remove events below the chose severity\n          triggers = _.filter(triggers, trigger => {\n            return Number(trigger.priority) >= Number(annotation.minseverity);\n          });\n\n          var objectids = _.map(triggers, 'triggerid');\n          return self.zabbixAPI\n            .getEvents(objectids, timeFrom, timeTo, showOkEvents)\n            .then(events => {\n              var indexedTriggers = _.groupBy(triggers, 'triggerid');\n\n              // Hide acknowledged events if option enabled\n              if (annotation.hideAcknowledged) {\n                events = _.filter(events, event => {\n                  return !event.acknowledges.length;\n                });\n              }\n\n              return _.map(events, event => {\n                var title ='';\n                if (annotation.showHostname) {\n                  title += event.hosts[0].name + ': ';\n                }\n\n                // Show event type (OK or Problem)\n                title += Number(event.value) ? 'Problem' : 'OK';\n\n                var formatted_acknowledges = utils.formatAcknowledges(event.acknowledges);\n                return {\n                  annotation: annotation,\n                  time: event.clock * 1000,\n                  title: title,\n                  text: indexedTriggers[event.objectid].description + formatted_acknowledges\n                };\n              });\n            });\n        });\n    });\n  }\n\n}\n\nfunction bindFunctionDefs(functionDefs, category) {\n  var aggregationFunctions = _.map(metricFunctions.getCategories()[category], 'name');\n  var aggFuncDefs = _.filter(functionDefs, function(func) {\n    return _.includes(aggregationFunctions, func.def.name);\n  });\n\n  return _.map(aggFuncDefs, function(func) {\n    var funcInstance = metricFunctions.createFuncInstance(func.def, func.params);\n    return funcInstance.bindFunction(DataProcessor.metricFunctions);\n  });\n}\n\nfunction filterFunctionDefs(funcs, category) {\n  let filteredFuncs = _.map(metricFunctions.getCategories()[category]);\n  return _.filter(funcs, func => {\n    return _.includes(filteredFuncs, func.def.name);\n  });\n}\n\nfunction formatMetric(metricObj) {\n  return {\n    text: metricObj.name,\n    expandable: false\n  };\n}\n\n/**\n * Custom formatter for template variables.\n * Default Grafana \"regex\" formatter returns\n * value1|value2\n * This formatter returns\n * (value1|value2)\n * This format needed for using in complex regex with\n * template variables, for example\n * /CPU $cpu_item.*time/ where $cpu_item is system,user,iowait\n */\nfunction zabbixTemplateFormat(value, variable) {\n  if (typeof value === 'string') {\n    return utils.escapeRegex(value);\n  }\n\n  var escapedValues = _.map(value, utils.escapeRegex);\n  return '(' + escapedValues.join('|') + ')';\n}\n\n/** If template variables are used in request, replace it using regex format\n * and wrap with '/' for proper multi-value work. Example:\n * $variable selected as a, b, c\n * We use filter $variable\n * $variable    -> a|b|c    -> /a|b|c/\n * /$variable/  -> /a|b|c/  -> /a|b|c/\n */\nfunction replaceTemplateVars(templateSrv, target, scopedVars) {\n  var replacedTarget = templateSrv.replace(target, scopedVars, zabbixTemplateFormat);\n  if (target !== replacedTarget && !utils.regexPattern.test(replacedTarget)) {\n    replacedTarget = '/^' + replacedTarget + '$/';\n  }\n  return replacedTarget;\n}\n\nfunction extractText(str, pattern, useCaptureGroups) {\n  let extractPattern = new RegExp(pattern);\n  let extractedValue = extractPattern.exec(str);\n  if (extractedValue) {\n    if (useCaptureGroups) {\n      extractedValue = extractedValue[1];\n    } else {\n      extractedValue = extractedValue[0];\n    }\n  }\n  return extractedValue;\n}\n\n// Apply function one by one:\n// sequence([a(), b(), c()]) = c(b(a()));\nfunction sequence(funcsArray) {\n  return function(result) {\n    for (var i = 0; i < funcsArray.length; i++) {\n      result = funcsArray[i].call(this, result);\n    }\n    return result;\n  };\n}\n"]}