{"version":3,"sources":["../../src/datasource-zabbix/datasource.js"],"names":[],"mappings":"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","file":"datasource.js","sourcesContent":["//import angular from 'angular';\nimport _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\nimport * as utils from './utils';\nimport * as migrations from './migrations';\nimport * as metricFunctions from './metricFunctions';\nimport dataProcessor from './dataProcessor';\nimport responseHandler from './responseHandler';\nimport './zabbix.js';\nimport {ZabbixAPIError} from './zabbixAPICore.service.js';\n\nclass ZabbixAPIDatasource {\n\n  /** @ngInject */\n  constructor(instanceSettings, templateSrv, alertSrv, Zabbix) {\n    this.templateSrv = templateSrv;\n    this.alertSrv = alertSrv;\n\n    // General data source settings\n    this.name             = instanceSettings.name;\n    this.url              = instanceSettings.url;\n    this.basicAuth        = instanceSettings.basicAuth;\n    this.withCredentials  = instanceSettings.withCredentials;\n\n    // Zabbix API credentials\n    this.username         = instanceSettings.jsonData.username;\n    this.password         = instanceSettings.jsonData.password;\n\n    // Use trends instead history since specified time\n    this.trends           = instanceSettings.jsonData.trends;\n    this.trendsFrom       = instanceSettings.jsonData.trendsFrom || '7d';\n\n    // Set cache update interval\n    var ttl = instanceSettings.jsonData.cacheTTL || '1h';\n    this.cacheTTL = utils.parseInterval(ttl);\n\n    this.zabbix = new Zabbix(this.url, this.username, this.password, this.basicAuth, this.withCredentials, this.cacheTTL);\n\n    // Use custom format for template variables\n    this.replaceTemplateVars = _.partial(replaceTemplateVars, this.templateSrv);\n  }\n\n  ////////////////////////\n  // Datasource methods //\n  ////////////////////////\n\n  /**\n   * Query panel data. Calls for each panel in dashboard.\n   * @param  {Object} options   Contains time range, targets and other info.\n   * @return {Object} Grafana metrics object with timeseries data for each target.\n   */\n  query(options) {\n    let timeFrom = Math.ceil(dateMath.parse(options.range.from) / 1000);\n    let timeTo = Math.ceil(dateMath.parse(options.range.to) / 1000);\n\n    let useTrendsFrom = Math.ceil(dateMath.parse('now-' + this.trendsFrom) / 1000);\n    let useTrends = (timeFrom <= useTrendsFrom) && this.trends;\n\n    // Create request for each target\n    let promises = _.map(options.targets, target => {\n      // Prevent changes of original object\n      target = _.cloneDeep(target);\n      this.replaceTargetVariables(target, options);\n\n      // Apply Time-related functions (timeShift(), etc)\n      let timeFunctions = bindFunctionDefs(target.functions, 'Time');\n      if (timeFunctions.length) {\n        const [time_from, time_to] = sequence(timeFunctions)([timeFrom, timeTo]);\n        timeFrom = time_from;\n        timeTo = time_to;\n      }\n\n      // Metrics or Text query mode\n      if (target.mode !== 1) {\n        // Migrate old targets\n        target = migrations.migrate(target);\n\n        // Don't request undefined and hidden targets\n        if (target.hide || !target.group || !target.host || !target.item) {\n          return [];\n        }\n\n        if (!target.mode || target.mode === 0) {\n          return this.queryNumericData(target, timeFrom, timeTo, useTrends);\n        } else if (target.mode === 2) {\n          return this.queryTextData(target, timeFrom, timeTo);\n        }\n      }\n\n      // IT services mode\n      else if (target.mode === 1) {\n        // Don't show undefined and hidden targets\n        if (target.hide || !target.itservice || !target.slaProperty) {\n          return [];\n        }\n\n        return this.zabbix.getSLA(target.itservice.serviceid, timeFrom, timeTo)\n        .then(slaObject => {\n          return responseHandler.handleSLAResponse(target.itservice, target.slaProperty, slaObject);\n        });\n      }\n    });\n\n    // Data for panel (all targets)\n    return Promise.all(_.flatten(promises))\n      .then(_.flatten)\n      .then(timeseries_data => {\n        return downsampleSeries(timeseries_data, options);\n      })\n      .then(data => {\n        return { data: data };\n      });\n  }\n\n  queryNumericData(target, timeFrom, timeTo, useTrends) {\n    let options = {\n      itemtype: 'num'\n    };\n    return this.zabbix.getItemsFromTarget(target, options)\n    .then(items => {\n      let getHistoryPromise;\n\n      if (useTrends) {\n        let valueType = this.getTrendValueType(target);\n        getHistoryPromise = this.zabbix.getTrend(items, timeFrom, timeTo)\n          .then(history => {\n            return responseHandler.handleTrends(history, items, valueType);\n          });\n      } else {\n        // Use history\n        getHistoryPromise = this.zabbix.getHistory(items, timeFrom, timeTo)\n          .then(history => {\n            return responseHandler.handleHistory(history, items);\n          });\n      }\n\n      return getHistoryPromise.then(timeseries_data => {\n        return this.applyDataProcessingFunctions(timeseries_data, target);\n      });\n    });\n  }\n\n  getTrendValueType(target) {\n    // Find trendValue() function and get specified trend value\n    var trendFunctions = _.map(metricFunctions.getCategories()['Trends'], 'name');\n    var trendValueFunc = _.find(target.functions, func => {\n      return _.includes(trendFunctions, func.def.name);\n    });\n    return trendValueFunc ? trendValueFunc.params[0] : \"avg\";\n  }\n\n  applyDataProcessingFunctions(timeseries_data, target) {\n    let transformFunctions   = bindFunctionDefs(target.functions, 'Transform');\n    let aggregationFunctions = bindFunctionDefs(target.functions, 'Aggregate');\n    let filterFunctions      = bindFunctionDefs(target.functions, 'Filter');\n    let aliasFunctions       = bindFunctionDefs(target.functions, 'Alias');\n\n    // Apply transformation functions\n    timeseries_data = _.map(timeseries_data, timeseries => {\n      timeseries.datapoints = sequence(transformFunctions)(timeseries.datapoints);\n      return timeseries;\n    });\n\n    // Apply filter functions\n    if (filterFunctions.length) {\n      timeseries_data = sequence(filterFunctions)(timeseries_data);\n    }\n\n    // Apply aggregations\n    if (aggregationFunctions.length) {\n      let dp = _.map(timeseries_data, 'datapoints');\n      dp = sequence(aggregationFunctions)(dp);\n\n      let aggFuncNames = _.map(metricFunctions.getCategories()['Aggregate'], 'name');\n      let lastAgg = _.findLast(target.functions, func => {\n        return _.includes(aggFuncNames, func.def.name);\n      });\n\n      timeseries_data = [{\n        target: lastAgg.text,\n        datapoints: dp\n      }];\n    }\n\n    // Apply alias functions\n    _.forEach(timeseries_data, sequence(aliasFunctions));\n\n    // Apply Time-related functions (timeShift(), etc)\n    // Find timeShift() function and get specified trend value\n    this.applyTimeShiftFunction(timeseries_data, target);\n\n    return timeseries_data;\n  }\n\n  applyTimeShiftFunction(timeseries_data, target) {\n    // Find timeShift() function and get specified interval\n    let timeShiftFunc = _.find(target.functions, (func) => {\n      return func.def.name === 'timeShift';\n    });\n    if (timeShiftFunc) {\n      let shift = timeShiftFunc.params[0];\n      _.forEach(timeseries_data, (series) => {\n        series.datapoints = dataProcessor.unShiftTimeSeries(shift, series.datapoints);\n      });\n    }\n  }\n\n  queryTextData(target, timeFrom, timeTo) {\n    let options = {\n      itemtype: 'text'\n    };\n    return this.zabbix.getItemsFromTarget(target, options)\n      .then(items => {\n        if (items.length) {\n          return this.zabbix.getHistory(items, timeFrom, timeTo)\n            .then(history => {\n              return responseHandler.convertHistory(history, items, false, (point) => {\n                let value = point.value;\n\n                // Regex-based extractor\n                if (target.textFilter) {\n                  value = extractText(point.value, target.textFilter, target.useCaptureGroups);\n                }\n\n                return [value, point.clock * 1000];\n              });\n            });\n        } else {\n          return Promise.resolve([]);\n        }\n      });\n  }\n\n  /**\n   * Test connection to Zabbix API\n   * @return {object} Connection status and Zabbix API version\n   */\n  testDatasource() {\n    let zabbixVersion;\n    return this.zabbix.getVersion()\n    .then(version => {\n      zabbixVersion = version;\n      return this.zabbix.login();\n    })\n    .then(() => {\n      return {\n        status: \"success\",\n        title: \"Success\",\n        message: \"Zabbix API version: \" + zabbixVersion\n      };\n    })\n    .catch(error => {\n      if (error instanceof ZabbixAPIError) {\n        return {\n          status: \"error\",\n          title: error.message,\n          message: error.data\n        };\n      } else {\n        return {\n          status: \"error\",\n          title: \"Connection failed\",\n          message: \"Could not connect to given url\"\n        };\n      }\n    });\n  }\n\n  ////////////////\n  // Templating //\n  ////////////////\n\n  /**\n   * Find metrics from templated request.\n   *\n   * @param  {string} query Query from Templating\n   * @return {string}       Metric name - group, host, app or item or list\n   *                        of metrics in \"{metric1,metcic2,...,metricN}\" format.\n   */\n  metricFindQuery(query) {\n    let result;\n    let parts = [];\n\n    // Split query. Query structure: group.host.app.item\n    _.each(query.split('.'), part => {\n      part = this.replaceTemplateVars(part, {});\n\n      // Replace wildcard to regex\n      if (part === '*') {\n        part = '/.*/';\n      }\n      parts.push(part);\n    });\n    let template = _.zipObject(['group', 'host', 'app', 'item'], parts);\n\n    // Get items\n    if (parts.length === 4) {\n      // Search for all items, even it's not belong to any application\n      if (template.app === '/.*/') {\n        template.app = '';\n      }\n      result = this.zabbix.getItems(template.group, template.host, template.app, template.item);\n    } else if (parts.length === 3) {\n      // Get applications\n      result = this.zabbix.getApps(template.group, template.host, template.app);\n    } else if (parts.length === 2) {\n      // Get hosts\n      result = this.zabbix.getHosts(template.group, template.host);\n    } else if (parts.length === 1) {\n      // Get groups\n      result = this.zabbix.getGroups(template.group);\n    } else {\n      result = Promise.resolve([]);\n    }\n\n    return result.then(metrics => {\n      return metrics.map(formatMetric);\n    });\n  }\n\n  /////////////////\n  // Annotations //\n  /////////////////\n\n  annotationQuery(options) {\n    var timeFrom = Math.ceil(dateMath.parse(options.rangeRaw.from) / 1000);\n    var timeTo = Math.ceil(dateMath.parse(options.rangeRaw.to) / 1000);\n    var annotation = options.annotation;\n    var showOkEvents = annotation.showOkEvents ? [0, 1] : 1;\n\n    // Show all triggers\n    var showTriggers = [0, 1];\n\n    var getTriggers = this.zabbix\n      .getTriggers(this.replaceTemplateVars(annotation.group, {}),\n                   this.replaceTemplateVars(annotation.host, {}),\n                   this.replaceTemplateVars(annotation.application, {}),\n                   showTriggers);\n\n    return getTriggers.then(triggers => {\n\n      // Filter triggers by description\n      if (utils.isRegex(annotation.trigger)) {\n        triggers = _.filter(triggers, trigger => {\n          return utils.buildRegex(annotation.trigger).test(trigger.description);\n        });\n      } else if (annotation.trigger) {\n        triggers = _.filter(triggers, trigger => {\n          return trigger.description === annotation.trigger;\n        });\n      }\n\n      // Remove events below the chose severity\n      triggers = _.filter(triggers, trigger => {\n        return Number(trigger.priority) >= Number(annotation.minseverity);\n      });\n\n      var objectids = _.map(triggers, 'triggerid');\n      return this.zabbix\n        .getEvents(objectids, timeFrom, timeTo, showOkEvents)\n        .then(events => {\n          var indexedTriggers = _.keyBy(triggers, 'triggerid');\n\n          // Hide acknowledged events if option enabled\n          if (annotation.hideAcknowledged) {\n            events = _.filter(events, event => {\n              return !event.acknowledges.length;\n            });\n          }\n\n          return _.map(events, event => {\n            let tags;\n            if (annotation.showHostname) {\n              tags = _.map(event.hosts, 'name');\n            }\n\n            // Show event type (OK or Problem)\n            let title = Number(event.value) ? 'Problem' : 'OK';\n\n            let formatted_acknowledges = utils.formatAcknowledges(event.acknowledges);\n            return {\n              annotation: annotation,\n              time: event.clock * 1000,\n              title: title,\n              tags: tags,\n              text: indexedTriggers[event.objectid].description + formatted_acknowledges\n            };\n          });\n        });\n    });\n  }\n\n  // Replace template variables\n  replaceTargetVariables(target, options) {\n    let parts = ['group', 'host', 'application', 'item'];\n    parts.forEach(p => {\n      target[p].filter = this.replaceTemplateVars(target[p].filter, options.scopedVars);\n    });\n    target.textFilter = this.replaceTemplateVars(target.textFilter, options.scopedVars);\n\n    _.forEach(target.functions, func => {\n      func.params = func.params.map(param => {\n        if (typeof param === 'number') {\n          return +this.templateSrv.replace(param.toString(), options.scopedVars);\n        } else {\n          return this.templateSrv.replace(param, options.scopedVars);\n        }\n      });\n    });\n  }\n\n}\n\nfunction bindFunctionDefs(functionDefs, category) {\n  var aggregationFunctions = _.map(metricFunctions.getCategories()[category], 'name');\n  var aggFuncDefs = _.filter(functionDefs, function(func) {\n    return _.includes(aggregationFunctions, func.def.name);\n  });\n\n  return _.map(aggFuncDefs, function(func) {\n    var funcInstance = metricFunctions.createFuncInstance(func.def, func.params);\n    return funcInstance.bindFunction(dataProcessor.metricFunctions);\n  });\n}\n\nfunction downsampleSeries(timeseries_data, options) {\n  return _.map(timeseries_data, timeseries => {\n    if (timeseries.datapoints.length > options.maxDataPoints) {\n      timeseries.datapoints = dataProcessor\n        .groupBy(options.interval, dataProcessor.AVERAGE, timeseries.datapoints);\n    }\n    return timeseries;\n  });\n}\n\nfunction formatMetric(metricObj) {\n  return {\n    text: metricObj.name,\n    expandable: false\n  };\n}\n\n/**\n * Custom formatter for template variables.\n * Default Grafana \"regex\" formatter returns\n * value1|value2\n * This formatter returns\n * (value1|value2)\n * This format needed for using in complex regex with\n * template variables, for example\n * /CPU $cpu_item.*time/ where $cpu_item is system,user,iowait\n */\nfunction zabbixTemplateFormat(value) {\n  if (typeof value === 'string') {\n    return utils.escapeRegex(value);\n  }\n\n  var escapedValues = _.map(value, utils.escapeRegex);\n  return '(' + escapedValues.join('|') + ')';\n}\n\n/**\n * If template variables are used in request, replace it using regex format\n * and wrap with '/' for proper multi-value work. Example:\n * $variable selected as a, b, c\n * We use filter $variable\n * $variable    -> a|b|c    -> /a|b|c/\n * /$variable/  -> /a|b|c/  -> /a|b|c/\n */\nfunction replaceTemplateVars(templateSrv, target, scopedVars) {\n  var replacedTarget = templateSrv.replace(target, scopedVars, zabbixTemplateFormat);\n  if (target !== replacedTarget && !utils.isRegex(replacedTarget)) {\n    replacedTarget = '/^' + replacedTarget + '$/';\n  }\n  return replacedTarget;\n}\n\nfunction extractText(str, pattern, useCaptureGroups) {\n  let extractPattern = new RegExp(pattern);\n  let extractedValue = extractPattern.exec(str);\n  if (extractedValue) {\n    if (useCaptureGroups) {\n      extractedValue = extractedValue[1];\n    } else {\n      extractedValue = extractedValue[0];\n    }\n  }\n  return extractedValue;\n}\n\n// Apply function one by one:\n// sequence([a(), b(), c()]) = c(b(a()));\nfunction sequence(funcsArray) {\n  return function(result) {\n    for (var i = 0; i < funcsArray.length; i++) {\n      result = funcsArray[i].call(this, result);\n    }\n    return result;\n  };\n}\n\nexport {ZabbixAPIDatasource, zabbixTemplateFormat};\n\n// Fix for backward compatibility with lodash 2.4\nif (!_.includes) {_.includes = _.contains;}\nif (!_.keyBy) {_.keyBy = _.indexBy;}\n"]}