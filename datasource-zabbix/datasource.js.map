{"version":3,"sources":["../../src/datasource-zabbix/datasource.js"],"names":[],"mappings":"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","file":"datasource.js","sourcesContent":["//import angular from 'angular';\nimport _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\nimport * as utils from './utils';\nimport * as migrations from './migrations';\nimport * as metricFunctions from './metricFunctions';\nimport DataProcessor from './DataProcessor';\nimport './zabbixAPI.service.js';\nimport './zabbixCache.service.js';\nimport './queryProcessor.service.js';\n\nexport class ZabbixAPIDatasource {\n\n  /** @ngInject */\n  constructor(instanceSettings, $q, templateSrv, alertSrv, zabbixAPIService, ZabbixCachingProxy, QueryProcessor) {\n\n    // General data source settings\n    this.name             = instanceSettings.name;\n    this.url              = instanceSettings.url;\n    this.basicAuth        = instanceSettings.basicAuth;\n    this.withCredentials  = instanceSettings.withCredentials;\n\n    // Zabbix API credentials\n    this.username         = instanceSettings.jsonData.username;\n    this.password         = instanceSettings.jsonData.password;\n\n    // Use trends instead history since specified time\n    this.trends           = instanceSettings.jsonData.trends;\n    this.trendsFrom       = instanceSettings.jsonData.trendsFrom || '7d';\n\n    // Set cache update interval\n    var ttl = instanceSettings.jsonData.cacheTTL || '1h';\n    this.cacheTTL = utils.parseInterval(ttl);\n\n    // Initialize Zabbix API\n    var ZabbixAPI = zabbixAPIService;\n    this.zabbixAPI = new ZabbixAPI(this.url, this.username, this.password, this.basicAuth, this.withCredentials);\n\n    // Initialize cache service\n    this.zabbixCache = new ZabbixCachingProxy(this.zabbixAPI, this.cacheTTL);\n\n    // Initialize query builder\n    this.queryProcessor = new QueryProcessor(this.zabbixCache);\n\n    // Dependencies\n    this.q = $q;\n    this.templateSrv = templateSrv;\n    this.alertSrv = alertSrv;\n\n    // Use custom format for template variables\n    this.replaceTemplateVars = _.partial(replaceTemplateVars, this.templateSrv);\n\n    console.log(this.zabbixCache);\n  }\n\n  ////////////////////////\n  // Datasource methods //\n  ////////////////////////\n\n  /**\n   * Query panel data. Calls for each panel in dashboard.\n   * @param  {Object} options   Contains time range, targets and other info.\n   * @return {Object} Grafana metrics object with timeseries data for each target.\n   */\n  query(options) {\n    var self = this;\n\n    // get from & to in seconds\n    var timeFrom = Math.ceil(dateMath.parse(options.range.from) / 1000);\n    var timeTo = Math.ceil(dateMath.parse(options.range.to) / 1000);\n    var useTrendsFrom = Math.ceil(dateMath.parse('now-' + this.trendsFrom) / 1000);\n    var useTrends = (timeFrom < useTrendsFrom) && this.trends;\n\n    // Create request for each target\n    var promises = _.map(options.targets, target => {\n\n      if (target.mode !== 1) {\n\n        // Migrate old targets\n        target = migrations.migrate(target);\n\n        // Don't request undefined and hidden targets\n        if (target.hide || !target.group || !target.host || !target.item) {\n          return [];\n        }\n\n        // Replace templated variables\n        var groupFilter = this.replaceTemplateVars(target.group.filter, options.scopedVars);\n        var hostFilter = this.replaceTemplateVars(target.host.filter, options.scopedVars);\n        var appFilter = this.replaceTemplateVars(target.application.filter, options.scopedVars);\n        var itemFilter = this.replaceTemplateVars(target.item.filter, options.scopedVars);\n\n        // Query numeric data\n        if (!target.mode || target.mode === 0) {\n          return self.queryNumericData(target, groupFilter, hostFilter, appFilter, itemFilter,\n                                       timeFrom, timeTo, useTrends, options, self);\n        }\n\n        // Query text data\n        else if (target.mode === 2) {\n          return self.queryTextData(target, groupFilter, hostFilter, appFilter, itemFilter,\n                                    timeFrom, timeTo, options, self);\n        }\n      }\n\n      // IT services mode\n      else if (target.mode === 1) {\n        // Don't show undefined and hidden targets\n        if (target.hide || !target.itservice || !target.slaProperty) {\n          return [];\n        }\n\n        return this.zabbixAPI\n          .getSLA(target.itservice.serviceid, timeFrom, timeTo)\n          .then(slaObject => {\n            return self.queryProcessor\n              .handleSLAResponse(target.itservice, target.slaProperty, slaObject);\n          });\n      }\n    }, this);\n\n    // Data for panel (all targets)\n    return this.q.all(_.flatten(promises))\n      .then(_.flatten)\n      .then(timeseries_data => {\n\n        // Series downsampling\n        var data = _.map(timeseries_data, timeseries => {\n          if (timeseries.datapoints.length > options.maxDataPoints) {\n            timeseries.datapoints = DataProcessor\n              .groupBy(options.interval, DataProcessor.AVERAGE, timeseries.datapoints);\n          }\n          return timeseries;\n        });\n        return { data: data };\n      });\n  }\n\n  queryNumericData(target, groupFilter, hostFilter, appFilter, itemFilter, timeFrom, timeTo, useTrends, options, self) {\n    // Build query in asynchronous manner\n    return self.queryProcessor\n      .build(groupFilter, hostFilter, appFilter, itemFilter, 'num')\n      .then(items => {\n        // Add hostname for items from multiple hosts\n        var addHostName = utils.isRegex(target.host.filter);\n        var getHistory;\n\n        // Use trends\n        if (useTrends) {\n\n          // Find trendValue() function and get specified trend value\n          var trendFunctions = _.map(metricFunctions.getCategories()['Trends'], 'name');\n          var trendValueFunc = _.find(target.functions, func => {\n            return _.contains(trendFunctions, func.def.name);\n          });\n          var valueType = trendValueFunc ? trendValueFunc.params[0] : \"avg\";\n\n          getHistory = self.zabbixAPI\n            .getTrend(items, timeFrom, timeTo)\n            .then(history => {\n              return self.queryProcessor.handleTrends(history, items, addHostName, valueType);\n            });\n        }\n\n        // Use history\n        else {\n          getHistory = self.zabbixCache\n            .getHistory(items, timeFrom, timeTo)\n            .then(history => {\n              return self.queryProcessor.handleHistory(history, items, addHostName);\n            });\n        }\n\n        return getHistory.then(timeseries_data => {\n\n          // Apply transformation functions\n          timeseries_data = _.map(timeseries_data, timeseries => {\n\n            // Filter only transform functions\n            var transformFunctions = bindFunctionDefs(target.functions, 'Transform', DataProcessor);\n\n            // Metric data processing\n            var dp = timeseries.datapoints;\n            for (var i = 0; i < transformFunctions.length; i++) {\n              dp = transformFunctions[i](dp);\n            }\n            timeseries.datapoints = dp;\n\n            return timeseries;\n          });\n\n          // Apply aggregations\n          var aggregationFunctions = bindFunctionDefs(target.functions, 'Aggregate', DataProcessor);\n          var dp = _.map(timeseries_data, 'datapoints');\n          if (aggregationFunctions.length) {\n            for (var i = 0; i < aggregationFunctions.length; i++) {\n              dp = aggregationFunctions[i](dp);\n            }\n            var lastAgg = _.findLast(target.functions, func => {\n              return _.contains(\n                _.map(metricFunctions.getCategories()['Aggregate'], 'name'), func.def.name);\n            });\n            timeseries_data = [\n              {\n                target: lastAgg.text,\n                datapoints: dp\n              }\n            ];\n          }\n\n          // Apply alias functions\n          var aliasFunctions = bindFunctionDefs(target.functions, 'Alias', DataProcessor);\n          for (var j = 0; j < aliasFunctions.length; j++) {\n            _.each(timeseries_data, aliasFunctions[j]);\n          }\n\n          return timeseries_data;\n        });\n      });\n  }\n\n  queryTextData(target, groupFilter, hostFilter, appFilter, itemFilter, timeFrom, timeTo, options, self) {\n    return self.queryProcessor\n      .build(groupFilter, hostFilter, appFilter, itemFilter, 'text')\n      .then(items => {\n        if (items.length) {\n          var textItemsPromises = _.map(items, item => {\n            return self.zabbixAPI.getLastValue(item.itemid);\n          });\n          return self.q.all(textItemsPromises)\n            .then(result => {\n              return _.map(result, (lastvalue, index) => {\n                var extractedValue;\n                if (target.textFilter) {\n                  var text_extract_pattern = new RegExp(self.replaceTemplateVars(target.textFilter, options.scopedVars));\n                  extractedValue = text_extract_pattern.exec(lastvalue);\n                  if (extractedValue) {\n                    if (target.useCaptureGroups) {\n                      extractedValue = extractedValue[1];\n                    } else {\n                      extractedValue = extractedValue[0];\n                    }\n                  }\n                } else {\n                  extractedValue = lastvalue;\n                }\n                return {\n                  target: items[index].name,\n                  datapoints: [[extractedValue, timeTo * 1000]]\n                };\n              });\n            });\n        } else {\n          return self.q.when([]);\n        }\n      });\n  }\n\n  /**\n   * Test connection to Zabbix API\n   * @return {object} Connection status and Zabbix API version\n   */\n  testDatasource() {\n    var self = this;\n    return this.zabbixAPI.getVersion()\n      .then(version => {\n        return self.zabbixAPI.login()\n          .then(auth => {\n            if (auth) {\n              return {\n                status: \"success\",\n                title: \"Success\",\n                message: \"Zabbix API version: \" + version\n              };\n            } else {\n              return {\n                status: \"error\",\n                title: \"Invalid user name or password\",\n                message: \"Zabbix API version: \" + version\n              };\n            }\n          }, error => {\n            return {\n              status: \"error\",\n              title: error.message,\n              message: error.data\n            };\n          });\n      }, error => {\n        console.log(error);\n        return {\n          status: \"error\",\n          title: \"Connection failed\",\n          message: \"Could not connect to given url\"\n        };\n      });\n  }\n\n  ////////////////\n  // Templating //\n  ////////////////\n\n  /**\n   * Find metrics from templated request.\n   *\n   * @param  {string} query Query from Templating\n   * @return {string}       Metric name - group, host, app or item or list\n   *                        of metrics in \"{metric1,metcic2,...,metricN}\" format.\n   */\n  metricFindQuery(query) {\n    // Split query. Query structure:\n    // group.host.app.item\n    var self = this;\n    var parts = [];\n    _.each(query.split('.'), function (part) {\n      part = self.replaceTemplateVars(part, {});\n\n      // Replace wildcard to regex\n      if (part === '*') {\n        part = '/.*/';\n      }\n      parts.push(part);\n    });\n    var template = _.object(['group', 'host', 'app', 'item'], parts);\n\n    // Get items\n    if (parts.length === 4) {\n      // Search for all items, even it's not belong to any application\n      if (template.app === '/.*/') {\n        template.app = '';\n      }\n      return this.queryProcessor\n        .getItems(template.group, template.host, template.app)\n        .then(items => {\n          return _.map(items, formatMetric);\n        });\n    }\n    // Get applications\n    else if (parts.length === 3) {\n      return this.queryProcessor\n        .getApps(template.group, template.host)\n        .then(apps => {\n          return _.map(apps, formatMetric);\n        });\n    }\n    // Get hosts\n    else if (parts.length === 2) {\n      return this.queryProcessor\n        .getHosts(template.group)\n        .then(hosts => {\n          return _.map(hosts, formatMetric);\n        });\n    }\n    // Get groups\n    else if (parts.length === 1) {\n      return this.zabbixCache\n        .getGroups(template.group)\n        .then(groups => {\n          return _.map(groups, formatMetric);\n        });\n    }\n    // Return empty object for invalid request\n    else {\n      return this.q.when([]);\n    }\n  }\n\n  /////////////////\n  // Annotations //\n  /////////////////\n\n  annotationQuery(options) {\n    var timeFrom = Math.ceil(dateMath.parse(options.rangeRaw.from) / 1000);\n    var timeTo = Math.ceil(dateMath.parse(options.rangeRaw.to) / 1000);\n    var annotation = options.annotation;\n    var showOkEvents = annotation.showOkEvents ? [0, 1] : 1;\n\n    // Show all triggers\n    var showTriggers = [0, 1];\n\n    var buildQuery = this.queryProcessor\n      .buildTriggerQuery(this.replaceTemplateVars(annotation.group, {}),\n                         this.replaceTemplateVars(annotation.host, {}),\n                         this.replaceTemplateVars(annotation.application, {}));\n    var self = this;\n    return buildQuery.then(query => {\n      return self.zabbixAPI\n        .getTriggers(query.groupids, query.hostids, query.applicationids,\n                     showTriggers, timeFrom, timeTo)\n        .then(triggers => {\n\n          // Filter triggers by description\n          if (utils.isRegex(annotation.trigger)) {\n            triggers = _.filter(triggers, trigger => {\n              return utils.buildRegex(annotation.trigger).test(trigger.description);\n            });\n          } else if (annotation.trigger) {\n            triggers = _.filter(triggers, trigger => {\n              return trigger.description === annotation.trigger;\n            });\n          }\n\n          // Remove events below the chose severity\n          triggers = _.filter(triggers, trigger => {\n            return Number(trigger.priority) >= Number(annotation.minseverity);\n          });\n\n          var objectids = _.map(triggers, 'triggerid');\n          return self.zabbixAPI\n            .getEvents(objectids, timeFrom, timeTo, showOkEvents)\n            .then(events => {\n              var indexedTriggers = _.indexBy(triggers, 'triggerid');\n\n              // Hide acknowledged events if option enabled\n              if (annotation.hideAcknowledged) {\n                events = _.filter(events, event => {\n                  return !event.acknowledges.length;\n                });\n              }\n\n              return _.map(events, event => {\n                var title ='';\n                if (annotation.showHostname) {\n                  title += event.hosts[0].name + ': ';\n                }\n\n                // Show event type (OK or Problem)\n                title += Number(event.value) ? 'Problem' : 'OK';\n\n                var formatted_acknowledges = utils.formatAcknowledges(event.acknowledges);\n                return {\n                  annotation: annotation,\n                  time: event.clock * 1000,\n                  title: title,\n                  text: indexedTriggers[event.objectid].description + formatted_acknowledges\n                };\n              });\n            });\n        });\n    });\n  }\n\n}\n\nfunction bindFunctionDefs(functionDefs, category, DataProcessor) {\n  'use strict';\n  var aggregationFunctions = _.map(metricFunctions.getCategories()[category], 'name');\n  var aggFuncDefs = _.filter(functionDefs, function(func) {\n    return _.contains(aggregationFunctions, func.def.name);\n  });\n\n  return _.map(aggFuncDefs, function(func) {\n    var funcInstance = metricFunctions.createFuncInstance(func.def, func.params);\n    return funcInstance.bindFunction(DataProcessor.metricFunctions);\n  });\n}\n\nfunction formatMetric(metricObj) {\n  'use strict';\n  return {\n    text: metricObj.name,\n    expandable: false\n  };\n}\n\n/**\n * Custom formatter for template variables.\n * Default Grafana \"regex\" formatter returns\n * value1|value2\n * This formatter returns\n * (value1|value2)\n * This format needed for using in complex regex with\n * template variables, for example\n * /CPU $cpu_item.*time/ where $cpu_item is system,user,iowait\n */\nfunction zabbixTemplateFormat(value, variable) {\n  if (typeof value === 'string') {\n    return utils.escapeRegex(value);\n  }\n\n  var escapedValues = _.map(value, utils.escapeRegex);\n  return '(' + escapedValues.join('|') + ')';\n}\n\n/** If template variables are used in request, replace it using regex format\n * and wrap with '/' for proper multi-value work. Example:\n * $variable selected as a, b, c\n * We use filter $variable\n * $variable    -> a|b|c    -> /a|b|c/\n * /$variable/  -> /a|b|c/  -> /a|b|c/\n */\nfunction replaceTemplateVars(templateSrv, target, scopedVars) {\n  var replacedTarget = templateSrv.replace(target, scopedVars, zabbixTemplateFormat);\n  if (target !== replacedTarget && !utils.regexPattern.test(replacedTarget)) {\n    replacedTarget = '/' + replacedTarget + '/';\n  }\n  return replacedTarget;\n}\n"]}