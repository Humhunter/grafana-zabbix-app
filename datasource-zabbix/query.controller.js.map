{"version":3,"sources":["../../src/datasource-zabbix/query.controller.js"],"names":[],"mappings":"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","file":"query.controller.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport angular from 'angular';\nimport _ from 'lodash';\nimport * as utils from './utils';\nimport * as metricFunctions from './metricFunctions';\nimport * as migrations from './migrations';\n\nimport './add-metric-function.directive';\nimport './metric-function-editor.directive';\n\nimport './css/query-editor.css!';\n\nexport class ZabbixQueryController extends QueryCtrl {\n\n  // ZabbixQueryCtrl constructor\n  constructor($scope, $injector, $rootScope, $sce, templateSrv) {\n    super($scope, $injector);\n    this.zabbix = this.datasource.zabbix;\n\n    // Use custom format for template variables\n    this.replaceTemplateVars = this.datasource.replaceTemplateVars;\n    this.templateSrv = templateSrv;\n\n    this.editorModes = {\n      0: {value: 'num', text: 'Metrics', mode: 0},\n      1: {value: 'itservice', text: 'IT Services', mode: 1},\n      2: {value: 'text', text: 'Text', mode: 2}\n    };\n\n    // Map functions for bs-typeahead\n    this.getGroupNames = _.partial(getMetricNames, this, 'groupList');\n    this.getHostNames = _.partial(getMetricNames, this, 'hostList');\n    this.getApplicationNames = _.partial(getMetricNames, this, 'appList');\n    this.getItemNames = _.partial(getMetricNames, this, 'itemList');\n\n    // Update metric suggestion when template variable was changed\n    $rootScope.$on('template-variable-value-updated', () => this.onVariableChange());\n\n    // Update metrics when item selected from dropdown\n    $scope.$on('typeahead-updated', () => {\n      this.onTargetBlur();\n    });\n\n    this.init = function() {\n      var target = this.target;\n\n      // Migrate old targets\n      target = migrations.migrate(target);\n\n      var scopeDefaults = {\n        metric: {},\n        oldTarget: _.cloneDeep(this.target),\n        queryOptionsText: this.renderQueryOptionsText()\n      };\n      _.defaults(this, scopeDefaults);\n\n      // Load default values\n      var targetDefaults = {\n        mode: 0,\n        group: { filter: \"\" },\n        host: { filter: \"\" },\n        application: { filter: \"\" },\n        item: { filter: \"\" },\n        functions: [],\n        options: {\n          showDisabledItems: false\n        }\n      };\n      _.defaults(target, targetDefaults);\n\n      // Create function instances from saved JSON\n      target.functions = _.map(target.functions, function(func) {\n        return metricFunctions.createFuncInstance(func.def, func.params);\n      });\n\n      if (target.mode === 0 ||\n          target.mode === 2) {\n\n        this.downsampleFunctionList = [\n          {name: \"avg\", value: \"avg\"},\n          {name: \"min\", value: \"min\"},\n          {name: \"max\", value: \"max\"}\n        ];\n\n        this.initFilters();\n      }\n      else if (target.mode === 1) {\n        this.slaPropertyList = [\n          {name: \"Status\", property: \"status\"},\n          {name: \"SLA\", property: \"sla\"},\n          {name: \"OK time\", property: \"okTime\"},\n          {name: \"Problem time\", property: \"problemTime\"},\n          {name: \"Down time\", property: \"downtimeTime\"}\n        ];\n        this.itserviceList = [{name: \"test\"}];\n        this.updateITServiceList();\n      }\n    };\n\n    this.init();\n  }\n\n  initFilters() {\n    let itemtype = this.editorModes[this.target.mode].value;\n    return Promise.all([\n      this.suggestGroups(),\n      this.suggestHosts(),\n      this.suggestApps(),\n      this.suggestItems(itemtype)\n    ]);\n  }\n\n  suggestGroups() {\n    return this.zabbix.getAllGroups()\n    .then(groups => {\n      this.metric.groupList = groups;\n      return groups;\n    });\n  }\n\n  suggestHosts() {\n    let groupFilter = this.replaceTemplateVars(this.target.group.filter);\n    return this.zabbix.getAllHosts(groupFilter)\n    .then(hosts => {\n      this.metric.hostList = hosts;\n      return hosts;\n    });\n  }\n\n  suggestApps() {\n    let groupFilter = this.replaceTemplateVars(this.target.group.filter);\n    let hostFilter = this.replaceTemplateVars(this.target.host.filter);\n    return this.zabbix.getAllApps(groupFilter, hostFilter)\n    .then(apps => {\n      this.metric.appList = apps;\n      return apps;\n    });\n  }\n\n  suggestItems(itemtype = 'num') {\n    let groupFilter = this.replaceTemplateVars(this.target.group.filter);\n    let hostFilter = this.replaceTemplateVars(this.target.host.filter);\n    let appFilter = this.replaceTemplateVars(this.target.application.filter);\n    let options = {\n      itemtype: itemtype,\n      showDisabledItems: this.target.options.showDisabledItems\n    };\n\n    return this.zabbix\n    .getAllItems(groupFilter, hostFilter, appFilter, options)\n    .then(items => {\n      this.metric.itemList = items;\n      return items;\n    });\n  }\n\n  isRegex(str) {\n    return utils.isRegex(str);\n  }\n\n  isVariable(str) {\n    return utils.isTemplateVariable(str, this.templateSrv.variables);\n  }\n\n  onTargetBlur() {\n    var newTarget = _.cloneDeep(this.target);\n    if (!_.isEqual(this.oldTarget, this.target)) {\n      this.oldTarget = newTarget;\n      this.targetChanged();\n    }\n  }\n\n  onVariableChange() {\n    if (this.isContainsVariables()) {\n      this.targetChanged();\n    }\n  }\n\n  /**\n   * Check query for template variables\n   */\n  isContainsVariables() {\n    var self = this;\n    return _.some(self.templateSrv.variables, variable => {\n      return _.some(['group', 'host', 'application', 'item'], field => {\n        return self.templateSrv.containsVariable(self.target[field].filter, variable.name);\n      });\n    });\n  }\n\n  parseTarget() {\n    // Parse target\n  }\n\n  // Validate target and set validation info\n  validateTarget() {\n    // validate\n  }\n\n  targetChanged() {\n    this.initFilters();\n    this.parseTarget();\n    this.panelCtrl.refresh();\n  }\n\n  addFunction(funcDef) {\n    var newFunc = metricFunctions.createFuncInstance(funcDef);\n    newFunc.added = true;\n    this.target.functions.push(newFunc);\n\n    this.moveAliasFuncLast();\n\n    if (newFunc.params.length && newFunc.added ||\n        newFunc.def.params.length === 0) {\n      this.targetChanged();\n    }\n  }\n\n  removeFunction(func) {\n    this.target.functions = _.without(this.target.functions, func);\n    this.targetChanged();\n  }\n\n  moveAliasFuncLast() {\n    var aliasFunc = _.find(this.target.functions, function(func) {\n      return func.def.name === 'alias' ||\n        func.def.name === 'aliasByNode' ||\n        func.def.name === 'aliasByMetric';\n    });\n\n    if (aliasFunc) {\n      this.target.functions = _.without(this.target.functions, aliasFunc);\n      this.target.functions.push(aliasFunc);\n    }\n  }\n\n  toggleQueryOptions() {\n    this.showQueryOptions = !this.showQueryOptions;\n  }\n\n  onQueryOptionChange() {\n    this.queryOptionsText = this.renderQueryOptionsText();\n    this.onTargetBlur();\n  }\n\n  renderQueryOptionsText() {\n    var optionsMap = {\n      showDisabledItems: \"Show disabled items\"\n    };\n    var options = [];\n    _.forOwn(this.target.options, (value, key) => {\n      if (value) {\n        if (value === true) {\n          // Show only option name (if enabled) for boolean options\n          options.push(optionsMap[key]);\n        } else {\n          // Show \"option = value\" for another options\n          options.push(optionsMap[key] + \" = \" + value);\n        }\n      }\n    });\n    return \"Options: \" + options.join(', ');\n  }\n\n  /**\n   * Switch query editor to specified mode.\n   * Modes:\n   *  0 - items\n   *  1 - IT services\n   *  2 - Text metrics\n   */\n  switchEditorMode(mode) {\n    this.target.mode = mode;\n    this.init();\n  }\n\n  /////////////////\n  // IT Services //\n  /////////////////\n\n  /**\n   * Update list of IT services\n   */\n  updateITServiceList() {\n    this.zabbix.getITService().then((iteservices) => {\n      this.itserviceList = [];\n      this.itserviceList = this.itserviceList.concat(iteservices);\n    });\n  }\n\n  /**\n   * Call when IT service is selected.\n   */\n  selectITService() {\n    if (!_.isEqual(this.oldTarget, this.target) && _.isEmpty(this.target.errors)) {\n      this.oldTarget = angular.copy(this.target);\n      this.panelCtrl.refresh();\n    }\n  }\n}\n\n// Set templateUrl as static property\nZabbixQueryController.templateUrl = 'datasource-zabbix/partials/query.editor.html';\n\n// Get list of metric names for bs-typeahead directive\nfunction getMetricNames(scope, metricList) {\n  return _.uniq(_.map(scope.metric[metricList], 'name'));\n}\n"]}