{"version":3,"sources":["../../src/datasource-zabbix/responseHandler.js"],"names":[],"mappings":"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","file":"responseHandler.js","sourcesContent":["import _ from 'lodash';\n\n/**\n * Convert Zabbix API history.get response to Grafana format\n *\n * @return {Array}            Array of timeseries in Grafana format\n *                            {\n *                               target: \"Metric name\",\n *                               datapoints: [[<value>, <unixtime>], ...]\n *                            }\n */\nfunction convertHistory(history, items, addHostName, convertPointCallback) {\n  /**\n   * Response should be in the format:\n   * data: [\n   *          {\n   *             target: \"Metric name\",\n   *             datapoints: [[<value>, <unixtime>], ...]\n   *          }, ...\n   *       ]\n   */\n\n  // Group history by itemid\n  var grouped_history = _.groupBy(history, 'itemid');\n  var hosts = _.uniqBy(_.flatten(_.map(items, 'hosts')), 'hostid');  //uniqBy is needed to deduplicate\n\n  return _.map(grouped_history, function(hist, itemid) {\n    var item = _.find(items, {'itemid': itemid});\n    var alias = item.name;\n    if (_.keys(hosts).length > 1 && addHostName) {   //only when actual multi hosts selected\n      var host = _.find(hosts, {'hostid': item.hostid});\n      alias = host.name + \": \" + alias;\n    }\n    return {\n      target: alias,\n      datapoints: _.map(hist, convertPointCallback)\n    };\n  });\n}\n\nfunction handleHistory(history, items, addHostName = true) {\n  return convertHistory(history, items, addHostName, convertHistoryPoint);\n}\n\nfunction handleTrends(history, items, valueType, addHostName = true) {\n  var convertPointCallback = _.partial(convertTrendPoint, valueType);\n  return convertHistory(history, items, addHostName, convertPointCallback);\n}\n\nfunction handleSLAResponse(itservice, slaProperty, slaObject) {\n  var targetSLA = slaObject[itservice.serviceid].sla[0];\n  if (slaProperty.property === 'status') {\n    var targetStatus = parseInt(slaObject[itservice.serviceid].status);\n    return {\n      target: itservice.name + ' ' + slaProperty.name,\n      datapoints: [\n        [targetStatus, targetSLA.to * 1000]\n      ]\n    };\n  } else {\n    return {\n      target: itservice.name + ' ' + slaProperty.name,\n      datapoints: [\n        [targetSLA[slaProperty.property], targetSLA.from * 1000],\n        [targetSLA[slaProperty.property], targetSLA.to * 1000]\n      ]\n    };\n  }\n}\n\nfunction convertHistoryPoint(point) {\n  // Value must be a number for properly work\n  return [\n    Number(point.value),\n    point.clock * 1000\n  ];\n}\n\nfunction convertTrendPoint(valueType, point) {\n  var value;\n  switch (valueType) {\n    case \"min\":\n      value = point.value_min;\n      break;\n    case \"max\":\n      value = point.value_max;\n      break;\n    case \"avg\":\n      value = point.value_avg;\n      break;\n    default:\n      value = point.value_avg;\n  }\n\n  return [\n    Number(value),\n    point.clock * 1000\n  ];\n}\n\nexport default {\n  handleHistory: handleHistory,\n  convertHistory: convertHistory,\n  handleTrends: handleTrends,\n  handleSLAResponse: handleSLAResponse\n};\n\n// Fix for backward compatibility with lodash 2.4\nif (!_.uniqBy) {_.uniqBy = _.uniq;}\n"]}