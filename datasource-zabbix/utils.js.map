{"version":3,"sources":["../../src/datasource-zabbix/utils.js"],"names":[],"mappings":";;;;;;;AAAO;;AACA;;;;;;;;;;;AAUA,eAAS,cAAT,CAAwB,IAAxB,EAA8B,GAA9B,EAAmC;;;;AAIxC,YAAI,aAAa,IAAI,SAAJ,CAAc,IAAI,OAAJ,CAAY,GAAZ,IAAmB,CAAnB,EAAsB,IAAI,WAAJ,CAAgB,GAAhB,CAApC,EAA0D,KAA1D,CAAgE,GAAhE,CAAb;;;AAJoC,aAOnC,IAAI,IAAI,WAAW,MAAX,EAAmB,KAAK,CAAL,EAAQ,GAAxC,EAA6C;AAC3C,iBAAO,KAAK,OAAL,CAAa,MAAM,CAAN,EAAS,WAAW,IAAI,CAAJ,CAAjC,CAAP,CAD2C;SAA7C;AAGA,eAAO,IAAP,CAVwC;OAAnC;;;;;;AAcH,qBAAe;AAEZ,eAAS,OAAT,CAAiB,GAAjB,EAAsB;AAC3B,eAAO,aAAa,IAAb,CAAkB,GAAlB,CAAP,CAD2B;OAAtB;;;;AAIA,eAAS,UAAT,CAAoB,GAApB,EAAyB;AAC9B,YAAI,UAAU,IAAI,KAAJ,CAAU,YAAV,CAAV,CAD0B;AAE9B,YAAI,UAAU,QAAQ,CAAR,CAAV,CAF0B;AAG9B,YAAI,QAAQ,QAAQ,CAAR,MAAe,EAAf,GAAoB,QAAQ,CAAR,CAApB,GAAiC,SAAjC,CAHkB;AAI9B,eAAO,IAAI,MAAJ,CAAW,OAAX,EAAoB,KAApB,CAAP,CAJ8B;OAAzB;;;;AAOA,eAAS,aAAT,CAAuB,QAAvB,EAAiC;AACtC,YAAI,kBAAkB,0BAAlB,CADkC;AAEtC,YAAI,iBAAiB,gBAAgB,IAAhB,CAAqB,QAArB,CAAjB,CAFkC;AAGtC,eAAO,OAAO,QAAP,CAAgB,OAAO,eAAe,CAAf,CAAP,CAAhB,EAA2C,eAAe,CAAf,CAA3C,EAA8D,OAA9D,EAAP,CAHsC;OAAjC;;;;;;;;;;;AAYA,eAAS,kBAAT,CAA4B,YAA5B,EAA0C;AAC/C,YAAI,aAAa,MAAb,EAAqB;AACvB,cAAI,yBAAyB,6DACzB,mDADyB,CADN;AAGvB,YAAE,IAAF,CAAO,EAAE,GAAF,CAAM,YAAN,EAAoB,UAAU,GAAV,EAAe;AACxC,gBAAI,YAAY,OAAO,IAAP,CAAY,IAAI,KAAJ,CAAxB,CADoC;AAExC,mBAAO,gBAAgB,UAAU,MAAV,CAAiB,sBAAjB,CAAhB,GAA2D,eAA3D,GAA6E,IAAI,KAAJ,GAChF,IADG,GACI,IAAI,IAAJ,GAAW,GADf,GACqB,IAAI,OAAJ,GAAc,GADnC,GACyC,WADzC,GACuD,IAAI,OAAJ,GAAc,YADrE,CAFiC;WAAf,CAA3B,EAII,UAAU,GAAV,EAAe;AACjB,qCAAyB,uBAAuB,MAAvB,CAA8B,GAA9B,CAAzB,CADiB;WAAf,CAJJ,CAHuB;AAUvB,mCAAyB,uBAAuB,MAAvB,CAA8B,UAA9B,CAAzB,CAVuB;AAWvB,iBAAO,sBAAP,CAXuB;SAAzB,MAYO;AACL,iBAAO,EAAP,CADK;SAZP;OADK;;;;AAkBA,eAAS,qBAAT,CAA+B,GAA/B,EAAoC;AACzC,YAAI,sBAAsB,oBAAtB,CADqC;AAEzC,YAAI,mBAAmB,aAAnB,CAFqC;AAGzC,YAAI,IAAI,KAAJ,CAAU,mBAAV,CAAJ,EAAoC;AAClC,iBAAO,GAAP,CADkC;SAApC,MAEO;AACL,iBAAO,IAAI,OAAJ,CAAY,gBAAZ,EAA8B,IAA9B,CAAP,CADK;SAFP;OAHK","file":"utils.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\n\n\n/**\n * Expand Zabbix item name\n *\n * @param  {string} name item name, ie \"CPU $2 time\"\n * @param  {string} key  item key, ie system.cpu.util[,system,avg1]\n * @return {string}      expanded name, ie \"CPU system time\"\n */\nexport function expandItemName(name, key) {\n\n  // extract params from key:\n  // \"system.cpu.util[,system,avg1]\" --> [\"\", \"system\", \"avg1\"]\n  var key_params = key.substring(key.indexOf('[') + 1, key.lastIndexOf(']')).split(',');\n\n  // replace item parameters\n  for (var i = key_params.length; i >= 1; i--) {\n    name = name.replace('$' + i, key_params[i - 1]);\n  }\n  return name;\n}\n\n// Pattern for testing regex\nvar regexPattern = /^\\/(.*)\\/([gmi]*)$/m;\n\nexport function isRegex(str) {\n  return regexPattern.test(str);\n}\n\nexport function buildRegex(str) {\n  var matches = str.match(regexPattern);\n  var pattern = matches[1];\n  var flags = matches[2] !== \"\" ? matches[2] : undefined;\n  return new RegExp(pattern, flags);\n}\n\nexport function parseInterval(interval) {\n  var intervalPattern = /(^[\\d]+)(y|M|w|d|h|m|s)/g;\n  var momentInterval = intervalPattern.exec(interval);\n  return moment.duration(Number(momentInterval[1]), momentInterval[2]).valueOf();\n}\n\n/**\n * Format acknowledges.\n *\n * @param  {array} acknowledges array of Zabbix acknowledge objects\n * @return {string} HTML-formatted table\n */\nexport function formatAcknowledges(acknowledges) {\n  if (acknowledges.length) {\n    var formatted_acknowledges = '<br><br>Acknowledges:<br><table><tr><td><b>Time</b></td>'\n      + '<td><b>User</b></td><td><b>Comments</b></td></tr>';\n    _.each(_.map(acknowledges, function (ack) {\n      var timestamp = moment.unix(ack.clock);\n      return '<tr><td><i>' + timestamp.format(\"DD MMM YYYY HH:mm:ss\") + '</i></td><td>' + ack.alias\n        + ' (' + ack.name + ' ' + ack.surname + ')' + '</td><td>' + ack.message + '</td></tr>';\n    }), function (ack) {\n      formatted_acknowledges = formatted_acknowledges.concat(ack);\n    });\n    formatted_acknowledges = formatted_acknowledges.concat('</table>');\n    return formatted_acknowledges;\n  } else {\n    return '';\n  }\n}\n\nexport function convertToZabbixAPIUrl(url) {\n  var zabbixAPIUrlPattern = /.*api_jsonrpc.php$/;\n  var trimSlashPattern = /(.*?)[\\/]*$/;\n  if (url.match(zabbixAPIUrlPattern)) {\n    return url;\n  } else {\n    return url.replace(trimSlashPattern, \"$1\");\n  }\n}\n"]}