{"version":3,"sources":["../../src/datasource-zabbix/zabbix.js"],"names":[],"mappings":"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","file":"zabbix.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\nimport * as utils from './utils';\nimport './zabbixAPI.service.js';\nimport './zabbixCachingProxy.service.js';\n\n// Use factory() instead service() for multiple data sources support.\n// Each Zabbix data source instance should initialize its own API instance.\n\n/** @ngInject */\nfunction ZabbixFactory(zabbixAPIService, ZabbixCachingProxy) {\n\n  class Zabbix {\n    constructor(url, username, password, basicAuth, withCredentials, cacheTTL) {\n\n      // Initialize Zabbix API\n      var ZabbixAPI = zabbixAPIService;\n      this.zabbixAPI = new ZabbixAPI(url, username, password, basicAuth, withCredentials);\n\n      // Initialize caching proxy for requests\n      let cacheOptions = {\n        enabled: true,\n        ttl: cacheTTL\n      };\n      this.cachingProxy = new ZabbixCachingProxy(this.zabbixAPI, cacheOptions);\n\n      // Proxy methods\n      this.getHistory = this.cachingProxy.getHistory.bind(this.cachingProxy);\n\n      this.getTrend = this.zabbixAPI.getTrend.bind(this.zabbixAPI);\n      this.getEvents = this.zabbixAPI.getEvents.bind(this.zabbixAPI);\n      this.getAcknowledges = this.zabbixAPI.getAcknowledges.bind(this.zabbixAPI);\n      this.getITService = this.zabbixAPI.getITService.bind(this.zabbixAPI);\n      this.getSLA = this.zabbixAPI.getSLA.bind(this.zabbixAPI);\n      this.getVersion = this.zabbixAPI.getVersion.bind(this.zabbixAPI);\n      this.login = this.zabbixAPI.login.bind(this.zabbixAPI);\n    }\n\n    getItemsFromTarget(target, options) {\n      let parts = ['group', 'host', 'application', 'item'];\n      let filters = _.map(parts, p => target[p].filter);\n      return this.getItems(...filters, options);\n    }\n\n    getAllGroups() {\n      return this.cachingProxy.getGroups();\n    }\n\n    getGroups(groupFilter) {\n      return this.getAllGroups()\n      .then(groups => findByFilter(groups, groupFilter));\n    }\n\n    /**\n     * Get list of host belonging to given groups.\n     */\n    getAllHosts(groupFilter) {\n      return this.getGroups(groupFilter)\n      .then(groups => {\n        let groupids = _.map(groups, 'groupid');\n        return this.cachingProxy.getHosts(groupids);\n      });\n    }\n\n    getHosts(groupFilter, hostFilter) {\n      return this.getAllHosts(groupFilter)\n      .then(hosts => findByFilter(hosts, hostFilter));\n    }\n\n    /**\n     * Get list of applications belonging to given groups and hosts.\n     */\n    getAllApps(groupFilter, hostFilter) {\n      return this.getHosts(groupFilter, hostFilter)\n      .then(hosts => {\n        let hostids = _.map(hosts, 'hostid');\n        return this.cachingProxy.getApps(hostids);\n      });\n    }\n\n    getApps(groupFilter, hostFilter, appFilter) {\n      return this.getHosts(groupFilter, hostFilter)\n      .then(hosts => {\n        let hostids = _.map(hosts, 'hostid');\n        if (appFilter) {\n          return this.cachingProxy.getApps(hostids)\n          .then(apps => filterByQuery(apps, appFilter));\n        } else {\n          return {\n            appFilterEmpty: true,\n            hostids: hostids\n          };\n        }\n      });\n    }\n\n    getAllItems(groupFilter, hostFilter, appFilter, options = {}) {\n      return this.getApps(groupFilter, hostFilter, appFilter)\n      .then(apps => {\n        if (apps.appFilterEmpty) {\n          return this.cachingProxy.getItems(apps.hostids, undefined, options.itemtype);\n        } else {\n          let appids = _.map(apps, 'applicationid');\n          return this.cachingProxy.getItems(undefined, appids, options.itemtype);\n        }\n      })\n      .then(items => {\n        if (!options.showDisabledItems) {\n          items = _.filter(items, {'status': '0'});\n        }\n        return items;\n      });\n    }\n\n    getItems(groupFilter, hostFilter, appFilter, itemFilter, options = {}) {\n      return this.getAllItems(groupFilter, hostFilter, appFilter, options)\n      .then(items => filterByQuery(items, itemFilter));\n    }\n\n    /**\n     * Build query - convert target filters to array of Zabbix items\n     */\n    getTriggers(groupFilter, hostFilter, appFilter, showTriggers) {\n      let promises = [\n        this.getGroups(groupFilter),\n        this.getHosts(groupFilter, hostFilter),\n        this.getApps(groupFilter, hostFilter, appFilter)\n      ];\n\n      return Promise.all(promises)\n      .then(results => {\n        let filteredGroups = results[0];\n        let filteredHosts = results[1];\n        let filteredApps = results[2];\n        let query = {};\n\n        if (appFilter) {\n          query.applicationids = _.flatten(_.map(filteredApps, 'applicationid'));\n        }\n        if (hostFilter) {\n          query.hostids = _.map(filteredHosts, 'hostid');\n        }\n        if (groupFilter) {\n          query.groupids = _.map(filteredGroups, 'groupid');\n        }\n\n        return query;\n      }).then(query => {\n        return this.zabbixAPI\n        .getTriggers(query.groupids, query.hostids, query.applicationids, showTriggers);\n      });\n    }\n  }\n\n  return Zabbix;\n}\n\nangular\n  .module('grafana.services')\n  .factory('Zabbix', ZabbixFactory);\n\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Find group, host, app or item by given name.\n * @param  list list of groups, apps or other\n * @param  name visible name\n * @return      array with finded element or undefined\n */\nfunction findByName(list, name) {\n  var finded = _.find(list, {'name': name});\n  if (finded) {\n    return [finded];\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Different hosts can contains applications and items with same name.\n * For this reason use _.filter, which return all elements instead _.find,\n * which return only first finded.\n * @param  {[type]} list list of elements\n * @param  {[type]} name app name\n * @return {[type]}      array with finded element or undefined\n */\nfunction filterByName(list, name) {\n  var finded = _.filter(list, {'name': name});\n  if (finded) {\n    return finded;\n  } else {\n    return undefined;\n  }\n}\n\nfunction filterByRegex(list, regex) {\n  var filterPattern = utils.buildRegex(regex);\n  return _.filter(list, function (zbx_obj) {\n    return filterPattern.test(zbx_obj.name);\n  });\n}\n\nfunction findByFilter(list, filter) {\n  if (utils.isRegex(filter)) {\n    return filterByRegex(list, filter);\n  } else {\n    return findByName(list, filter);\n  }\n}\n\nfunction filterByQuery(list, filter) {\n  if (utils.isRegex(filter)) {\n    return filterByRegex(list, filter);\n  } else {\n    return filterByName(list, filter);\n  }\n}\n"]}