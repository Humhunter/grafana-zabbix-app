{"version":3,"sources":["../../src/datasource-zabbix/zabbixAPI.service.js"],"names":[],"mappings":"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","file":"zabbixAPI.service.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\nimport * as utils from './utils';\nimport './zabbixAPICore.service';\n\n/** @ngInject */\nfunction ZabbixAPIServiceFactory(alertSrv, zabbixAPICoreService) {\n\n  /**\n   * Zabbix API Wrapper.\n   * Creates Zabbix API instance with given parameters (url, credentials and other).\n   * Wraps API calls and provides high-level methods.\n   */\n  class ZabbixAPI {\n\n    constructor(api_url, username, password, basicAuth, withCredentials) {\n      this.url              = api_url;\n      this.username         = username;\n      this.password         = password;\n      this.auth             = \"\";\n\n      this.requestOptions = {\n        basicAuth: basicAuth,\n        withCredentials: withCredentials\n      };\n\n      this.loginPromise = null;\n      this.loginErrorCount = 0;\n      this.maxLoginAttempts = 3;\n\n      this.alertSrv = alertSrv;\n      this.zabbixAPICore = zabbixAPICoreService;\n\n      this.getTrend = this.getTrend_ZBXNEXT1193;\n      //getTrend = getTrend_30;\n    }\n\n    //////////////////////////\n    // Core method wrappers //\n    //////////////////////////\n\n    request(method, params) {\n      return this.zabbixAPICore.request(this.url, method, params, this.requestOptions, this.auth)\n      .catch(error => {\n        if (isNotAuthorized(error.data)) {\n          // Handle auth errors\n          this.loginErrorCount++;\n          if (this.loginErrorCount > this.maxLoginAttempts) {\n            this.loginErrorCount = 0;\n            return null;\n          } else {\n            return this.loginOnce()\n            .then(() => this.request(method, params));\n          }\n        } else {\n          // Handle API errors\n          let message = error.data ? error.data : error.statusText;\n          this.alertAPIError(message);\n        }\n      });\n    }\n\n    alertAPIError(message, timeout = 5000) {\n      this.alertSrv.set(\n        \"Zabbix API Error\",\n        message,\n        'error',\n        timeout\n      );\n    }\n\n    /**\n     * When API unauthenticated or auth token expired each request produce login()\n     * call. But auth token is common to all requests. This function wraps login() method\n     * and call it once. If login() already called just wait for it (return its promise).\n     * @return login promise\n     */\n    loginOnce() {\n      if (!this.loginPromise) {\n        this.loginPromise = Promise.resolve(\n          this.login().then(auth => {\n            this.auth = auth;\n            this.loginPromise = null;\n            return auth;\n          })\n        );\n      }\n      return this.loginPromise;\n    }\n\n    /**\n     * Get authentication token.\n     */\n    login() {\n      return this.zabbixAPICore.login(this.url, this.username, this.password, this.requestOptions);\n    }\n\n    /**\n     * Get Zabbix API version\n     */\n    getVersion() {\n      return this.zabbixAPICore.getVersion(this.url, this.requestOptions);\n    }\n\n    ////////////////////////////////\n    // Zabbix API method wrappers //\n    ////////////////////////////////\n\n    acknowledgeEvent(eventid, message) {\n      var params = {\n        eventids: eventid,\n        message: message\n      };\n\n      return this.request('event.acknowledge', params);\n    }\n\n    getGroups() {\n      var params = {\n        output: ['name'],\n        sortfield: 'name',\n        real_hosts: true\n      };\n\n      return this.request('hostgroup.get', params);\n    }\n\n    getHosts(groupids) {\n      var params = {\n        output: ['name', 'host'],\n        sortfield: 'name'\n      };\n      if (groupids) {\n        params.groupids = groupids;\n      }\n\n      return this.request('host.get', params);\n    }\n\n    getApps(hostids) {\n      var params = {\n        output: ['applicationid', 'name'],\n        hostids: hostids\n      };\n\n      return this.request('application.get', params);\n    }\n\n    /**\n     * Get Zabbix items\n     * @param  {[type]} hostids  host ids\n     * @param  {[type]} appids   application ids\n     * @param  {String} itemtype 'num' or 'text'\n     * @return {[type]}          array of items\n     */\n    getItems(hostids, appids, itemtype) {\n      var params = {\n        output: [\n          'name', 'key_',\n          'value_type',\n          'hostid',\n          'status',\n          'state'\n        ],\n        sortfield: 'name',\n        webitems: true,\n        filter: {},\n        selectHosts: [\n          'hostid',\n          'name'\n        ]\n      };\n      if (hostids) {\n        params.hostids = hostids;\n      }\n      if (appids) {\n        params.applicationids = appids;\n      }\n      if (itemtype === 'num') {\n        // Return only numeric metrics\n        params.filter.value_type = [0, 3];\n      }\n      if (itemtype === 'text') {\n        // Return only text metrics\n        params.filter.value_type = [1, 2, 4];\n      }\n\n      return this.request('item.get', params)\n      .then(expandItems);\n\n      function expandItems(items) {\n        items.forEach(item => {\n          item.item = item.name;\n          item.name = utils.expandItemName(item.item, item.key_);\n          return item;\n        });\n        return items;\n      }\n    }\n\n    getLastValue(itemid) {\n      var params = {\n        output: ['lastvalue'],\n        itemids: itemid\n      };\n      return this.request('item.get', params)\n      .then(items => items.length ? items[0].lastvalue : null);\n    }\n\n    /**\n     * Perform history query from Zabbix API\n     *\n     * @param  {Array}  items       Array of Zabbix item objects\n     * @param  {Number} timeFrom   Time in seconds\n     * @param  {Number} timeTill   Time in seconds\n     * @return {Array}  Array of Zabbix history objects\n     */\n    getHistory(items, timeFrom, timeTill) {\n\n      // Group items by value type and perform request for each value type\n      let grouped_items = _.groupBy(items, 'value_type');\n      let promises = _.map(grouped_items, (items, value_type) => {\n        let itemids = _.map(items, 'itemid');\n        let params = {\n          output: 'extend',\n          history: value_type,\n          itemids: itemids,\n          sortfield: 'clock',\n          sortorder: 'ASC',\n          time_from: timeFrom\n        };\n\n        // Relative queries (e.g. last hour) don't include an end time\n        if (timeTill) {\n          params.time_till = timeTill;\n        }\n\n        return this.request('history.get', params);\n      });\n\n      return Promise.all(promises).then(_.flatten);\n    }\n\n    /**\n     * Perform trends query from Zabbix API\n     * Use trends api extension from ZBXNEXT-1193 patch.\n     *\n     * @param  {Array}  items       Array of Zabbix item objects\n     * @param  {Number} time_from   Time in seconds\n     * @param  {Number} time_till   Time in seconds\n     * @return {Array}  Array of Zabbix trend objects\n     */\n    getTrend_ZBXNEXT1193(items, timeFrom, timeTill) {\n\n      // Group items by value type and perform request for each value type\n      let grouped_items = _.groupBy(items, 'value_type');\n      let promises = _.map(grouped_items, (items, value_type) => {\n        let itemids = _.map(items, 'itemid');\n        let params = {\n          output: 'extend',\n          trend: value_type,\n          itemids: itemids,\n          sortfield: 'clock',\n          sortorder: 'ASC',\n          time_from: timeFrom\n        };\n\n        // Relative queries (e.g. last hour) don't include an end time\n        if (timeTill) {\n          params.time_till = timeTill;\n        }\n\n        return this.request('trend.get', params);\n      });\n\n      return Promise.all(promises).then(_.flatten);\n    }\n\n    getTrend_30(items, time_from, time_till, value_type) {\n      var self = this;\n      var itemids = _.map(items, 'itemid');\n\n      var params = {\n        output: [\"itemid\",\n          \"clock\",\n          value_type\n        ],\n        itemids: itemids,\n        time_from: time_from\n      };\n\n      // Relative queries (e.g. last hour) don't include an end time\n      if (time_till) {\n        params.time_till = time_till;\n      }\n\n      return self.request('trend.get', params);\n    }\n\n    getITService(serviceids) {\n      var params = {\n        output: 'extend',\n        serviceids: serviceids\n      };\n      return this.request('service.get', params);\n    }\n\n    getSLA(serviceids, timeFrom, timeTo) {\n      var params = {\n        serviceids: serviceids,\n        intervals: [{\n          from: timeFrom,\n          to: timeTo\n        }]\n      };\n      return this.request('service.getsla', params);\n    }\n\n    getTriggers(groupids, hostids, applicationids, showTriggers, timeFrom, timeTo) {\n      var params = {\n        output: 'extend',\n        groupids: groupids,\n        hostids: hostids,\n        applicationids: applicationids,\n        expandDescription: true,\n        expandData: true,\n        expandComment: true,\n        monitored: true,\n        skipDependent: true,\n        //only_true: true,\n        filter: {\n          value: 1\n        },\n        selectGroups: ['name'],\n        selectHosts: ['name', 'host'],\n        selectItems: ['name', 'key_', 'lastvalue'],\n        selectLastEvent: 'extend'\n      };\n\n      if (showTriggers) {\n        params.filter.value = showTriggers;\n      }\n\n      if (timeFrom || timeTo) {\n        params.lastChangeSince = timeFrom;\n        params.lastChangeTill = timeTo;\n      }\n\n      return this.request('trigger.get', params);\n    }\n\n    getEvents(objectids, timeFrom, timeTo, showEvents) {\n      var params = {\n        output: 'extend',\n        time_from: timeFrom,\n        time_till: timeTo,\n        objectids: objectids,\n        select_acknowledges: 'extend',\n        selectHosts: 'extend',\n        value: showEvents\n      };\n\n      return this.request('event.get', params);\n    }\n\n    getAcknowledges(eventids) {\n      var params = {\n        output: 'extend',\n        eventids: eventids,\n        preservekeys: true,\n        select_acknowledges: 'extend',\n        sortfield: 'clock',\n        sortorder: 'DESC'\n      };\n\n      return this.request('event.get', params)\n      .then(events => {\n        return _.filter(events, (event) => event.acknowledges.length);\n      });\n    }\n\n  }\n\n  return ZabbixAPI;\n}\n\nfunction isNotAuthorized(message) {\n  return (\n    message === \"Session terminated, re-login, please.\" ||\n    message === \"Not authorised.\" ||\n    message === \"Not authorized.\"\n  );\n}\n\nangular\n  .module('grafana.services')\n  .factory('zabbixAPIService', ZabbixAPIServiceFactory);\n"]}