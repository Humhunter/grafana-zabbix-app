{"version":3,"sources":["../../src/datasource-zabbix/zabbixAPI.service.js"],"names":[],"mappings":"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","file":"zabbixAPI.service.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\nimport * as utils from './utils';\nimport './zabbixAPICore.service';\n\n/** @ngInject */\nfunction ZabbixAPIService($q, alertSrv, zabbixAPICoreService) {\n\n  /**\n   * Zabbix API Wrapper.\n   * Creates Zabbix API instance with given parameters (url, credentials and other).\n   * Wraps API calls and provides high-level methods.\n   */\n  class ZabbixAPI {\n\n    constructor(api_url, username, password, basicAuth, withCredentials) {\n      this.url              = api_url;\n      this.username         = username;\n      this.password         = password;\n      this.auth             = \"\";\n\n      this.requestOptions = {\n        basicAuth: basicAuth,\n        withCredentials: withCredentials\n      };\n\n      this.loginPromise = null;\n\n      this.$q = $q;\n      this.alertSrv = alertSrv;\n      this.zabbixAPICore = zabbixAPICoreService;\n\n      this.getTrend = this.getTrend_ZBXNEXT1193;\n      //getTrend = getTrend_30;\n    }\n\n    //////////////////////////\n    // Core method wrappers //\n    //////////////////////////\n\n    request(method, params) {\n      var self = this;\n\n      return this.zabbixAPICore.request(this.url, method, params, this.requestOptions, this.auth)\n        .then(function(result) {\n          return result;\n        },\n        // Handle API errors\n        function(error) {\n          if (isNotAuthorized(error.data)) {\n            return self.loginOnce().then(\n              function() {\n                return self.request(method, params);\n              },\n              // Handle user.login method errors\n              function(error) {\n                self.alertAPIError(error.data);\n              });\n          }\n        });\n    }\n\n    alertAPIError(message) {\n      this.alertSrv.set(\n        \"Zabbix API Error\",\n        message,\n        'error'\n      );\n    }\n\n    /**\n     * When API unauthenticated or auth token expired each request produce login()\n     * call. But auth token is common to all requests. This function wraps login() method\n     * and call it once. If login() already called just wait for it (return its promise).\n     * @return login promise\n     */\n    loginOnce() {\n      var self = this;\n      var deferred  = this.$q.defer();\n      if (!self.loginPromise) {\n        self.loginPromise = deferred.promise;\n        self.login().then(\n          function(auth) {\n            self.loginPromise = null;\n            self.auth = auth;\n            deferred.resolve(auth);\n          },\n          function(error) {\n            self.loginPromise = null;\n            deferred.reject(error);\n          }\n        );\n      } else {\n        return self.loginPromise;\n      }\n      return deferred.promise;\n    }\n\n    /**\n     * Get authentication token.\n     */\n    login() {\n      return this.zabbixAPICore.login(this.url, this.username, this.password, this.requestOptions);\n    }\n\n    /**\n     * Get Zabbix API version\n     */\n    getVersion() {\n      return this.zabbixAPICore.getVersion(this.url, this.requestOptions);\n    }\n\n    ////////////////////////////////\n    // Zabbix API method wrappers //\n    ////////////////////////////////\n\n    getGroups() {\n      var params = {\n        output: ['name'],\n        sortfield: 'name',\n        real_hosts: true\n      };\n\n      return this.request('hostgroup.get', params);\n    }\n\n    getHosts(groupids) {\n      var params = {\n        output: ['name', 'host'],\n        sortfield: 'name'\n      };\n      if (groupids) {\n        params.groupids = groupids;\n      }\n\n      return this.request('host.get', params);\n    }\n\n    getApps(hostids) {\n      var params = {\n        output: ['applicationid', 'name'],\n        hostids: hostids\n      };\n\n      return this.request('application.get', params);\n    }\n\n    /**\n     * Get Zabbix items\n     * @param  {[type]} hostids  host ids\n     * @param  {[type]} appids   application ids\n     * @param  {String} itemtype 'num' or 'text'\n     * @return {[type]}          array of items\n     */\n    getItems(hostids, appids, itemtype) {\n      var params = {\n        output: [\n          'name', 'key_',\n          'value_type',\n          'hostid',\n          'status',\n          'state'\n        ],\n        sortfield: 'name',\n        webitems: true,\n        filter: {},\n        selectHosts: [\n          'hostid',\n          'name'\n        ]\n      };\n      if (hostids) {\n        params.hostids = hostids;\n      }\n      if (appids) {\n        params.applicationids = appids;\n      }\n      if (itemtype === 'num') {\n        // Return only numeric metrics\n        params.filter.value_type = [0, 3];\n      }\n      if (itemtype === 'text') {\n        // Return only text metrics\n        params.filter.value_type = [1, 2, 4];\n      }\n\n      return this.request('item.get', params)\n        .then(items => {\n          return _.forEach(items, item => {\n            item.item = item.name;\n            item.name = utils.expandItemName(item.item, item.key_);\n            return item;\n          });\n        });\n    }\n\n    getLastValue(itemid) {\n      var params = {\n        output: ['lastvalue'],\n        itemids: itemid\n      };\n      return this.request('item.get', params).then(function(items) {\n        if (items.length) {\n          return items[0].lastvalue;\n        } else {\n          return null;\n        }\n      });\n    }\n\n    /**\n     * Perform history query from Zabbix API\n     *\n     * @param  {Array}  items       Array of Zabbix item objects\n     * @param  {Number} time_from   Time in seconds\n     * @param  {Number} time_till   Time in seconds\n     * @return {Array}  Array of Zabbix history objects\n     */\n    getHistory(items, time_from, time_till) {\n      var self = this;\n\n      // Group items by value type\n      var grouped_items = _.groupBy(items, 'value_type');\n\n      // Perform request for each value type\n      return this.$q.all(_.map(grouped_items, function (items, value_type) {\n        var itemids = _.map(items, 'itemid');\n        var params = {\n          output: 'extend',\n          history: value_type,\n          itemids: itemids,\n          sortfield: 'clock',\n          sortorder: 'ASC',\n          time_from: time_from\n        };\n\n        // Relative queries (e.g. last hour) don't include an end time\n        if (time_till) {\n          params.time_till = time_till;\n        }\n\n        return self.request('history.get', params);\n      })).then(_.flatten);\n    }\n\n    /**\n     * Perform trends query from Zabbix API\n     * Use trends api extension from ZBXNEXT-1193 patch.\n     *\n     * @param  {Array}  items       Array of Zabbix item objects\n     * @param  {Number} time_from   Time in seconds\n     * @param  {Number} time_till   Time in seconds\n     * @return {Array}  Array of Zabbix trend objects\n     */\n    getTrend_ZBXNEXT1193(items, time_from, time_till) {\n      var self = this;\n\n      // Group items by value type\n      var grouped_items = _.groupBy(items, 'value_type');\n\n      // Perform request for each value type\n      return this.$q.all(_.map(grouped_items, function (items, value_type) {\n        var itemids = _.map(items, 'itemid');\n        var params = {\n          output: 'extend',\n          trend: value_type,\n          itemids: itemids,\n          sortfield: 'clock',\n          sortorder: 'ASC',\n          time_from: time_from\n        };\n\n        // Relative queries (e.g. last hour) don't include an end time\n        if (time_till) {\n          params.time_till = time_till;\n        }\n\n        return self.request('trend.get', params);\n      })).then(_.flatten);\n    }\n\n    getTrend_30(items, time_from, time_till, value_type) {\n      var self = this;\n      var itemids = _.map(items, 'itemid');\n\n      var params = {\n        output: [\"itemid\",\n          \"clock\",\n          value_type\n        ],\n        itemids: itemids,\n        time_from: time_from\n      };\n\n      // Relative queries (e.g. last hour) don't include an end time\n      if (time_till) {\n        params.time_till = time_till;\n      }\n\n      return self.request('trend.get', params);\n    }\n\n    getITService(/* optional */ serviceids) {\n      var params = {\n        output: 'extend',\n        serviceids: serviceids\n      };\n      return this.request('service.get', params);\n    }\n\n    getSLA(serviceids, from, to) {\n      var params = {\n        serviceids: serviceids,\n        intervals: [{\n          from: from,\n          to: to\n        }]\n      };\n      return this.request('service.getsla', params);\n    }\n\n    getTriggers(groupids, hostids, applicationids, showTriggers, timeFrom, timeTo) {\n      var params = {\n        output: 'extend',\n        groupids: groupids,\n        hostids: hostids,\n        applicationids: applicationids,\n        expandDescription: true,\n        expandData: true,\n        monitored: true,\n        skipDependent: true,\n        //only_true: true,\n        filter: {\n          value: 1\n        },\n        selectGroups: ['name'],\n        selectHosts: ['name', 'host'],\n        selectItems: ['name', 'key_', 'lastvalue'],\n        selectLastEvent: 'extend'\n      };\n\n      if (showTriggers) {\n        params.filter.value = showTriggers;\n      }\n\n      if (timeFrom || timeTo) {\n        params.lastChangeSince = timeFrom;\n        params.lastChangeTill = timeTo;\n      }\n\n      return this.request('trigger.get', params);\n    }\n\n    getEvents(objectids, from, to, showEvents) {\n      var params = {\n        output: 'extend',\n        time_from: from,\n        time_till: to,\n        objectids: objectids,\n        select_acknowledges: 'extend',\n        selectHosts: 'extend',\n        value: showEvents\n      };\n\n      return this.request('event.get', params);\n    }\n\n    getAcknowledges(eventids) {\n      var params = {\n        output: 'extend',\n        eventids: eventids,\n        preservekeys: true,\n        select_acknowledges: 'extend',\n        sortfield: 'clock',\n        sortorder: 'DESC'\n      };\n\n      return this.request('event.get', params)\n        .then(function (events) {\n          return _.filter(events, function(event) {\n            return event.acknowledges.length;\n          });\n        });\n    }\n\n  }\n\n  return ZabbixAPI;\n}\n\nfunction isNotAuthorized(message) {\n  return (\n    message === \"Session terminated, re-login, please.\" ||\n    message === \"Not authorised.\" ||\n    message === \"Not authorized.\"\n  );\n}\n\nangular\n  .module('grafana.services')\n  .factory('zabbixAPIService', ZabbixAPIService);\n"]}