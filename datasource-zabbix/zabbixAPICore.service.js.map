{"version":3,"sources":["../../src/datasource-zabbix/zabbixAPICore.service.js"],"names":[],"mappings":";;;;;;;;;;;;AA+FA,WAAS,eAAT,CAAyB,KAAzB,EAAgC;AAC9B,SAAK,IAAL,GAAY,MAAM,IAAlB;AACA,SAAK,SAAL,GAAiB,MAAM,OAAvB;AACA,SAAK,OAAL,GAAe,MAAM,IAArB;AACD;;;;AA/FM,a;;;;;;;;;;;;;;;;;;;;;AAED,0B;;;;AAGJ,sCAAY,EAAZ,EAAgB,UAAhB,EAA4B;AAAA;;AAC1B,eAAK,EAAL,GAAU,EAAV;AACA,eAAK,UAAL,GAAkB,UAAlB;AACD;;;;;;;;;;kCAMO,O,EAAS,M,EAAQ,M,EAAQ,O,EAAS,I,EAAM;AAC9C,gBAAI,WAAW,KAAK,EAAL,CAAQ,KAAR,EAAf;AACA,gBAAI,cAAc;AAChB,uBAAS,KADO;AAEhB,sBAAQ,MAFQ;AAGhB,sBAAQ,MAHQ;AAIhB,kBAAI;AAJY,aAAlB;;AAOA,gBAAI,SAAS,EAAb,EAAiB;;AAEf,uBAAS,MAAT,CAAgB,EAAC,MAAM,iBAAP,EAAhB;AACA,qBAAO,SAAS,OAAhB;AACD,aAJD,MAIO,IAAI,IAAJ,EAAU;;AAEf,0BAAY,IAAZ,GAAmB,IAAnB;AACD;;AAED,gBAAI,iBAAiB;AACnB,sBAAQ,MADW;AAEnB,uBAAS;AACP,gCAAgB;AADT,eAFU;AAKnB,mBAAK,OALc;AAMnB,oBAAM;AANa,aAArB;;;AAUA,gBAAI,QAAQ,SAAR,IAAqB,QAAQ,eAAjC,EAAkD;AAChD,6BAAe,eAAf,GAAiC,IAAjC;AACD;AACD,gBAAI,QAAQ,SAAZ,EAAuB;AACrB,6BAAe,OAAf,CAAuB,aAAvB,GAAuC,QAAQ,SAA/C;AACD;;AAED,iBAAK,UAAL,CAAgB,iBAAhB,CAAkC,cAAlC,EACG,IADH,CACQ,UAAC,QAAD,EAAc;;AAElB,kBAAI,CAAC,SAAS,IAAd,EAAoB;AAClB,yBAAS,MAAT,CAAgB,QAAhB;AACD;;;AAFD,mBAKK,IAAI,SAAS,IAAT,CAAc,KAAlB,EAAyB;AAC5B,2BAAS,MAAT,CAAgB,SAAS,IAAT,CAAc,KAA9B;AACD;;AAED,uBAAS,OAAT,CAAiB,SAAS,IAAT,CAAc,MAA/B;AACD,aAbH,EAaK,UAAC,KAAD,EAAW;AACZ,uBAAS,MAAT,CAAgB,MAAM,GAAtB;AACD,aAfH;;AAiBA,mBAAO,SAAS,OAAhB;AACD;;;gCAMK,O,EAAS,Q,EAAU,Q,EAAU,O,EAAS;AAC1C,gBAAI,SAAS;AACX,oBAAM,QADK;AAEX,wBAAU;AAFC,aAAb;AAIA,mBAAO,KAAK,OAAL,CAAa,OAAb,EAAsB,YAAtB,EAAoC,MAApC,EAA4C,OAA5C,EAAqD,IAArD,CAAP;AACD;;;qCAMU,O,EAAS,O,EAAS;AAC3B,mBAAO,KAAK,OAAL,CAAa,OAAb,EAAsB,iBAAtB,EAAyC,EAAzC,EAA6C,OAA7C,CAAP;AACD;;;;;;AAUH,sBAAgB,SAAhB,CAA0B,QAA1B,GAAqC,YAAW;AAC9C,eAAO,KAAK,SAAL,GAAiB,IAAjB,GAAwB,KAAK,OAApC;AACD,OAFD;;AAIA,cACG,MADH,CACU,kBADV,EAEG,OAFH,CAEW,sBAFX,EAEmC,oBAFnC","file":"zabbixAPICore.service.js","sourcesContent":["/**\n * General Zabbix API methods\n */\n\nimport angular from 'angular';\n\nclass ZabbixAPICoreService {\n\n  /** @ngInject */\n  constructor($q, backendSrv) {\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n  }\n\n  /**\n   * Request data from Zabbix API\n   * @return {object}  response.result\n   */\n  request(api_url, method, params, options, auth) {\n    var deferred = this.$q.defer();\n    var requestData = {\n      jsonrpc: '2.0',\n      method: method,\n      params: params,\n      id: 1\n    };\n\n    if (auth === \"\") {\n      // Reject immediately if not authenticated\n      deferred.reject({data: \"Not authorised.\"});\n      return deferred.promise;\n    } else if (auth) {\n      // Set auth parameter only if it needed\n      requestData.auth = auth;\n    }\n\n    var requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      url: api_url,\n      data: requestData\n    };\n\n    // Set request options for basic auth\n    if (options.basicAuth || options.withCredentials) {\n      requestOptions.withCredentials = true;\n    }\n    if (options.basicAuth) {\n      requestOptions.headers.Authorization = options.basicAuth;\n    }\n\n    this.backendSrv.datasourceRequest(requestOptions)\n      .then((response) => {\n        // General connection issues\n        if (!response.data) {\n          deferred.reject(response);\n        }\n\n        // Handle Zabbix API errors\n        else if (response.data.error) {\n          deferred.reject(response.data.error);\n        }\n\n        deferred.resolve(response.data.result);\n      }, (error) => {\n        deferred.reject(error.err);\n      });\n\n    return deferred.promise;\n  }\n\n  /**\n   * Get authentication token.\n   * @return {string}  auth token\n   */\n  login(api_url, username, password, options) {\n    var params = {\n      user: username,\n      password: password\n    };\n    return this.request(api_url, 'user.login', params, options, null);\n  }\n\n  /**\n   * Get Zabbix API version\n   * Matches the version of Zabbix starting from Zabbix 2.0.4\n   */\n  getVersion(api_url, options) {\n    return this.request(api_url, 'apiinfo.version', [], options);\n  }\n}\n\n// Define zabbix API exception type\nfunction ZabbixException(error) {\n  this.code = error.code;\n  this.errorType = error.message;\n  this.message = error.data;\n}\n\nZabbixException.prototype.toString = function() {\n  return this.errorType + \": \" + this.message;\n};\n\nangular\n  .module('grafana.services')\n  .service('zabbixAPICoreService', ZabbixAPICoreService);\n"]}