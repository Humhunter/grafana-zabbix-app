{"version":3,"sources":["../../src/datasource-zabbix/zabbixAPICore.service.js"],"names":[],"mappings":";;;;;;;;;;;;;AAIO,a;;;;;;;;;;;;;;;;;;;;;AAED,0B;;;;AAGJ,sCAAY,UAAZ,EAAwB;AAAA;;AACtB,eAAK,UAAL,GAAkB,UAAlB;AACD;;;;;;;;;;kCAMO,O,EAAS,M,EAAQ,M,EAAQ,O,EAAS,I,EAAM;AAC9C,gBAAI,cAAc;AAChB,uBAAS,KADO;AAEhB,sBAAQ,MAFQ;AAGhB,sBAAQ,MAHQ;AAIhB,kBAAI;AAJY,aAAlB;;AAOA,gBAAI,SAAS,EAAb,EAAiB;;AAEf,qBAAO,QAAQ,MAAR,CAAe,IAAI,cAAJ,CAAmB,EAAC,MAAM,iBAAP,EAAnB,CAAf,CAAP;AACD,aAHD,MAGO,IAAI,IAAJ,EAAU;;AAEf,0BAAY,IAAZ,GAAmB,IAAnB;AACD;;AAED,gBAAI,iBAAiB;AACnB,sBAAQ,MADW;AAEnB,mBAAK,OAFc;AAGnB,oBAAM,WAHa;AAInB,uBAAS;AACP,gCAAgB;AADT;AAJU,aAArB;;;AAUA,gBAAI,QAAQ,SAAR,IAAqB,QAAQ,eAAjC,EAAkD;AAChD,6BAAe,eAAf,GAAiC,IAAjC;AACD;AACD,gBAAI,QAAQ,SAAZ,EAAuB;AACrB,6BAAe,OAAf,CAAuB,aAAvB,GAAuC,QAAQ,SAA/C;AACD;;AAED,mBAAO,KAAK,iBAAL,CAAuB,cAAvB,CAAP;AACD;;;4CAEiB,c,EAAgB;AAChC,mBAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC,cAAlC,EACN,IADM,CACD,oBAAY;AAChB,kBAAI,CAAC,SAAS,IAAd,EAAoB;AAClB,uBAAO,QAAQ,MAAR,CAAe,IAAI,cAAJ,CAAmB,EAAC,MAAM,wBAAP,EAAnB,CAAf,CAAP;AACD,eAFD,MAEO,IAAI,SAAS,IAAT,CAAc,KAAlB,EAAyB;;;AAG9B,uBAAO,QAAQ,MAAR,CAAe,IAAI,cAAJ,CAAmB,SAAS,IAAT,CAAc,KAAjC,CAAf,CAAP;AACD;;;AAGD,qBAAO,SAAS,IAAT,CAAc,MAArB;AACD,aAZM,CAAP;AAaD;;;gCAMK,O,EAAS,Q,EAAU,Q,EAAU,O,EAAS;AAC1C,gBAAI,SAAS;AACX,oBAAM,QADK;AAEX,wBAAU;AAFC,aAAb;AAIA,mBAAO,KAAK,OAAL,CAAa,OAAb,EAAsB,YAAtB,EAAoC,MAApC,EAA4C,OAA5C,EAAqD,IAArD,CAAP;AACD;;;qCAMU,O,EAAS,O,EAAS;AAC3B,mBAAO,KAAK,OAAL,CAAa,OAAb,EAAsB,iBAAtB,EAAyC,EAAzC,EAA6C,OAA7C,CAAP;AACD;;;;;;gCAIU,c;AACX,gCAAY,KAAZ,EAAmB;AAAA;;AACjB,eAAK,IAAL,GAAY,MAAM,IAAlB;AACA,eAAK,IAAL,GAAY,MAAM,IAAlB;AACA,eAAK,OAAL,GAAe,MAAM,IAArB;AACA,eAAK,IAAL,GAAY,MAAM,IAAlB;AACD;;;;qCAEU;AACT,mBAAO,KAAK,IAAL,GAAY,IAAZ,GAAmB,KAAK,OAA/B;AACD;;;;;;;;AAGH,cACG,MADH,CACU,kBADV,EAEG,OAFH,CAEW,sBAFX,EAEmC,oBAFnC","file":"zabbixAPICore.service.js","sourcesContent":["/**\n * General Zabbix API methods\n */\n\nimport angular from 'angular';\n\nclass ZabbixAPICoreService {\n\n  /** @ngInject */\n  constructor(backendSrv) {\n    this.backendSrv = backendSrv;\n  }\n\n  /**\n   * Request data from Zabbix API\n   * @return {object}  response.result\n   */\n  request(api_url, method, params, options, auth) {\n    let requestData = {\n      jsonrpc: '2.0',\n      method: method,\n      params: params,\n      id: 1\n    };\n\n    if (auth === \"\") {\n      // Reject immediately if not authenticated\n      return Promise.reject(new ZabbixAPIError({data: \"Not authorised.\"}));\n    } else if (auth) {\n      // Set auth parameter only if it needed\n      requestData.auth = auth;\n    }\n\n    let requestOptions = {\n      method: 'POST',\n      url: api_url,\n      data: requestData,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    // Set request options for basic auth\n    if (options.basicAuth || options.withCredentials) {\n      requestOptions.withCredentials = true;\n    }\n    if (options.basicAuth) {\n      requestOptions.headers.Authorization = options.basicAuth;\n    }\n\n    return this.datasourceRequest(requestOptions);\n  }\n\n  datasourceRequest(requestOptions) {\n    return this.backendSrv.datasourceRequest(requestOptions)\n    .then(response => {\n      if (!response.data) {\n        return Promise.reject(new ZabbixAPIError({data: \"General Error, no data\"}));\n      } else if (response.data.error) {\n\n        // Handle Zabbix API errors\n        return Promise.reject(new ZabbixAPIError(response.data.error));\n      }\n\n      // Success\n      return response.data.result;\n    });\n  }\n\n  /**\n   * Get authentication token.\n   * @return {string}  auth token\n   */\n  login(api_url, username, password, options) {\n    let params = {\n      user: username,\n      password: password\n    };\n    return this.request(api_url, 'user.login', params, options, null);\n  }\n\n  /**\n   * Get Zabbix API version\n   * Matches the version of Zabbix starting from Zabbix 2.0.4\n   */\n  getVersion(api_url, options) {\n    return this.request(api_url, 'apiinfo.version', [], options);\n  }\n}\n\n// Define zabbix API exception type\nexport class ZabbixAPIError {\n  constructor(error) {\n    this.code = error.code;\n    this.name = error.data;\n    this.message = error.data;\n    this.data = error.data;\n  }\n\n  toString() {\n    return this.name + \": \" + this.message;\n  }\n}\n\nangular\n  .module('grafana.services')\n  .service('zabbixAPICoreService', ZabbixAPICoreService);\n"]}