{"version":3,"sources":["../../src/datasource-zabbix/zabbixAPICore.service.js"],"names":[],"mappings":";;;;;;;;;;;;AA2FA,WAAS,eAAT,CAAyB,KAAzB,EAAgC;AAC9B,SAAK,IAAL,GAAY,MAAM,IAAN,CADkB;AAE9B,SAAK,SAAL,GAAiB,MAAM,OAAN,CAFa;AAG9B,SAAK,OAAL,GAAe,MAAM,IAAN,CAHe;GAAhC;;;;AAvFO;;;;;;;;;;;;;;;;;;;;;AAED;;;;AAGJ,iBAHI,oBAGJ,CAAY,EAAZ,EAAgB,UAAhB,EAA4B;gCAHxB,sBAGwB;;AAC1B,eAAK,EAAL,GAAU,EAAV,CAD0B;AAE1B,eAAK,UAAL,GAAkB,UAAlB,CAF0B;SAA5B;;;;;;;;qBAHI;;kCAYI,SAAS,QAAQ,QAAQ,SAAS,MAAM;AAC9C,gBAAI,WAAW,KAAK,EAAL,CAAQ,KAAR,EAAX,CAD0C;AAE9C,gBAAI,cAAc;AAChB,uBAAS,KAAT;AACA,sBAAQ,MAAR;AACA,sBAAQ,MAAR;AACA,kBAAI,CAAJ;aAJE,CAF0C;;AAS9C,gBAAI,SAAS,EAAT,EAAa;;AAEf,uBAAS,MAAT,CAAgB,EAAC,MAAM,iBAAN,EAAjB,EAFe;AAGf,qBAAO,SAAS,OAAT,CAHQ;aAAjB,MAIO,IAAI,IAAJ,EAAU;;AAEf,0BAAY,IAAZ,GAAmB,IAAnB,CAFe;aAAV;;AAKP,gBAAI,iBAAiB;AACnB,sBAAQ,MAAR;AACA,uBAAS;AACP,gCAAgB,kBAAhB;eADF;AAGA,mBAAK,OAAL;AACA,oBAAM,WAAN;aANE;;;AAlB0C,gBA4B1C,QAAQ,SAAR,IAAqB,QAAQ,eAAR,EAAyB;AAChD,6BAAe,eAAf,GAAiC,IAAjC,CADgD;aAAlD;AAGA,gBAAI,QAAQ,SAAR,EAAmB;AACrB,6BAAe,OAAf,CAAuB,aAAvB,GAAuC,QAAQ,SAAR,CADlB;aAAvB;;AAIA,iBAAK,UAAL,CAAgB,iBAAhB,CAAkC,cAAlC,EAAkD,IAAlD,CAAuD,UAAU,QAAV,EAAoB;;AAEzE,kBAAI,CAAC,SAAS,IAAT,EAAe;AAClB,yBAAS,MAAT,CAAgB,QAAhB,EADkB;;;;AAApB,mBAKK,IAAI,SAAS,IAAT,CAAc,KAAd,EAAqB;AAC5B,2BAAS,MAAT,CAAgB,SAAS,IAAT,CAAc,KAAd,CAAhB,CAD4B;iBAAzB;;AAIL,uBAAS,OAAT,CAAiB,SAAS,IAAT,CAAc,MAAd,CAAjB,CAXyE;aAApB,CAAvD,CAnC8C;AAgD9C,mBAAO,SAAS,OAAT,CAhDuC;;;;gCAuD1C,SAAS,UAAU,UAAU,SAAS;AAC1C,gBAAI,SAAS;AACX,oBAAM,QAAN;AACA,wBAAU,QAAV;aAFE,CADsC;AAK1C,mBAAO,KAAK,OAAL,CAAa,OAAb,EAAsB,YAAtB,EAAoC,MAApC,EAA4C,OAA5C,EAAqD,IAArD,CAAP,CAL0C;;;;qCAYjC,SAAS,SAAS;AAC3B,mBAAO,KAAK,OAAL,CAAa,OAAb,EAAsB,iBAAtB,EAAyC,EAAzC,EAA6C,OAA7C,CAAP,CAD2B;;;;eA/EzB;;;AA2FN,sBAAgB,SAAhB,CAA0B,QAA1B,GAAqC,YAAW;AAC9C,eAAO,KAAK,SAAL,GAAiB,IAAjB,GAAwB,KAAK,OAAL,CADe;OAAX;;AAIrC,cACG,MADH,CACU,kBADV,EAEG,OAFH,CAEW,sBAFX,EAEmC,oBAFnC","file":"zabbixAPICore.service.js","sourcesContent":["/**\n * General Zabbix API methods\n */\n\nimport angular from 'angular';\n\nclass ZabbixAPICoreService {\n\n  /** @ngInject */\n  constructor($q, backendSrv) {\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n  }\n\n  /**\n   * Request data from Zabbix API\n   * @return {object}  response.result\n   */\n  request(api_url, method, params, options, auth) {\n    var deferred = this.$q.defer();\n    var requestData = {\n      jsonrpc: '2.0',\n      method: method,\n      params: params,\n      id: 1\n    };\n\n    if (auth === \"\") {\n      // Reject immediately if not authenticated\n      deferred.reject({data: \"Not authorised.\"});\n      return deferred.promise;\n    } else if (auth) {\n      // Set auth parameter only if it needed\n      requestData.auth = auth;\n    }\n\n    var requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      url: api_url,\n      data: requestData\n    };\n\n    // Set request options for basic auth\n    if (options.basicAuth || options.withCredentials) {\n      requestOptions.withCredentials = true;\n    }\n    if (options.basicAuth) {\n      requestOptions.headers.Authorization = options.basicAuth;\n    }\n\n    this.backendSrv.datasourceRequest(requestOptions).then(function (response) {\n      // General connection issues\n      if (!response.data) {\n        deferred.reject(response);\n      }\n\n      // Handle Zabbix API errors\n      else if (response.data.error) {\n        deferred.reject(response.data.error);\n      }\n\n      deferred.resolve(response.data.result);\n    });\n    return deferred.promise;\n  }\n\n  /**\n   * Get authentication token.\n   * @return {string}  auth token\n   */\n  login(api_url, username, password, options) {\n    var params = {\n      user: username,\n      password: password\n    };\n    return this.request(api_url, 'user.login', params, options, null);\n  }\n\n  /**\n   * Get Zabbix API version\n   * Matches the version of Zabbix starting from Zabbix 2.0.4\n   */\n  getVersion(api_url, options) {\n    return this.request(api_url, 'apiinfo.version', [], options);\n  }\n}\n\n// Define zabbix API exception type\nfunction ZabbixException(error) {\n  this.code = error.code;\n  this.errorType = error.message;\n  this.message = error.data;\n}\n\nZabbixException.prototype.toString = function() {\n  return this.errorType + \": \" + this.message;\n};\n\nangular\n  .module('grafana.services')\n  .service('zabbixAPICoreService', ZabbixAPICoreService);\n"]}