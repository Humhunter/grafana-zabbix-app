{"version":3,"sources":["../../src/panel-triggers/module.js"],"names":[],"mappings":"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","file":"module.js","sourcesContent":["/**\n * Grafana-Zabbix\n * Zabbix plugin for Grafana.\n * http://github.com/alexanderzobnin/grafana-zabbix\n *\n * Trigger panel.\n * This feature sponsored by CORE IT\n * http://www.coreit.fr\n *\n * Copyright 2015 Alexander Zobnin alexanderzobnin@gmail.com\n * Licensed under the Apache License, Version 2.0\n */\n\nimport _ from 'lodash';\nimport moment from 'moment';\nimport * as utils from '../datasource-zabbix/utils';\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport {triggerPanelEditor} from './editor';\nimport './css/panel_triggers.css!';\n\nvar defaultSeverity = [\n  { priority: 0, severity: 'Not classified',  color: '#B7DBAB', show: true },\n  { priority: 1, severity: 'Information',     color: '#82B5D8', show: true },\n  { priority: 2, severity: 'Warning',         color: '#E5AC0E', show: true },\n  { priority: 3, severity: 'Average',         color: '#C15C17', show: true },\n  { priority: 4, severity: 'High',            color: '#BF1B00', show: true },\n  { priority: 5, severity: 'Disaster',        color: '#890F02', show: true }\n];\n\nvar panelDefaults = {\n  datasource: null,\n  triggers: {\n    group: {filter: \"\"},\n    host: {filter: \"\"},\n    application: {filter: \"\"},\n    trigger: {filter: \"\"}\n  },\n  hostField: true,\n  statusField: false,\n  severityField: false,\n  lastChangeField: true,\n  ageField: true,\n  infoField: true,\n  limit: 10,\n  showTriggers: 'all triggers',\n  sortTriggersBy: { text: 'last change', value: 'lastchange' },\n  showEvents: { text: 'Problems', value: '1' },\n  triggerSeverity: defaultSeverity,\n  okEventColor: 'rgba(0, 245, 153, 0.45)',\n};\n\nvar triggerStatusMap = {\n  '0': 'OK',\n  '1': 'Problem'\n};\n\nvar defaultTimeFormat = \"DD MMM YYYY HH:mm:ss\";\n\nclass TriggerPanelCtrl extends MetricsPanelCtrl {\n\n  /** @ngInject */\n  constructor($scope, $injector, $q, $element, datasourceSrv, templateSrv) {\n    super($scope, $injector);\n    this.datasourceSrv = datasourceSrv;\n    this.templateSrv = templateSrv;\n    this.triggerStatusMap = triggerStatusMap;\n    this.defaultTimeFormat = defaultTimeFormat;\n\n    // Load panel defaults\n    // _.cloneDeep() need for prevent changing shared defaultSeverity.\n    // Load object \"by value\" istead \"by reference\".\n    _.defaults(this.panel, _.cloneDeep(panelDefaults));\n\n    this.triggerList = [];\n    this.refreshData();\n  }\n\n  /**\n   * Override onInitMetricsPanelEditMode() method from MetricsPanelCtrl.\n   * We don't need metric editor from Metrics Panel.\n   */\n  onInitMetricsPanelEditMode() {\n    this.addEditorTab('Options', triggerPanelEditor, 2);\n  }\n\n  refresh() {\n    this.onMetricsPanelRefresh();\n  }\n\n  onMetricsPanelRefresh() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode()) { return; }\n\n    this.refreshData();\n  }\n\n  refreshData() {\n    // clear loading/error state\n    delete this.error;\n    this.loading = true;\n    this.setTimeQueryStart();\n\n    var self = this;\n\n    // Load datasource\n    return this.datasourceSrv.get(this.panel.datasource).then(datasource => {\n      var zabbix = datasource.zabbixAPI;\n      var queryProcessor = datasource.queryProcessor;\n      var showEvents = self.panel.showEvents.value;\n      var triggerFilter = self.panel.triggers;\n\n      // Replace template variables\n      var groupFilter = datasource.replaceTemplateVars(triggerFilter.group.filter);\n      var hostFilter = datasource.replaceTemplateVars(triggerFilter.host.filter);\n      var appFilter = datasource.replaceTemplateVars(triggerFilter.application.filter);\n\n      var buildQuery = queryProcessor.buildTriggerQuery(groupFilter, hostFilter, appFilter);\n      return buildQuery.then(query => {\n        return zabbix.getTriggers(query.groupids,\n                                  query.hostids,\n                                  query.applicationids,\n                                  showEvents)\n          .then(triggers => {\n            return _.map(triggers, trigger => {\n              var triggerObj = trigger;\n\n              // Format last change and age\n              trigger.lastchangeUnix = Number(trigger.lastchange);\n              var timestamp = moment.unix(trigger.lastchangeUnix);\n              if (self.panel.customLastChangeFormat) {\n                // User defined format\n                triggerObj.lastchange = timestamp.format(self.panel.lastChangeFormat);\n              } else {\n                triggerObj.lastchange = timestamp.format(self.defaultTimeFormat);\n              }\n              triggerObj.age = timestamp.fromNow(true);\n\n              // Set host that the trigger belongs\n              if (trigger.hosts.length) {\n                triggerObj.host = trigger.hosts[0].name;\n              }\n\n              // Set color\n              if (trigger.value === '1') {\n                // Problem state\n                triggerObj.color = self.panel.triggerSeverity[trigger.priority].color;\n              } else {\n                // OK state\n                triggerObj.color = self.panel.okEventColor;\n              }\n\n              triggerObj.severity = self.panel.triggerSeverity[trigger.priority].severity;\n              return triggerObj;\n            });\n          })\n          .then(triggerList => {\n\n            // Request acknowledges for trigger\n            var eventids = _.map(triggerList, trigger => {\n              return trigger.lastEvent.eventid;\n            });\n\n            return zabbix.getAcknowledges(eventids)\n              .then(events => {\n\n                // Map events to triggers\n                _.each(triggerList, trigger => {\n                  var event = _.find(events, event => {\n                    return event.eventid === trigger.lastEvent.eventid;\n                  });\n\n                  if (event) {\n                    trigger.acknowledges = _.map(event.acknowledges, ack => {\n                      var time = new Date(+ack.clock * 1000);\n                      ack.time = time.toLocaleString();\n                      ack.user = ack.alias + ' (' + ack.name + ' ' + ack.surname + ')';\n                      return ack;\n                    });\n                  }\n                });\n\n                // Filter triggers by description\n                var triggerFilter = self.panel.triggers.trigger.filter;\n                if (triggerFilter) {\n                  triggerList = filterTriggers(triggerList, triggerFilter);\n                }\n\n                // Filter acknowledged triggers\n                if (self.panel.showTriggers === 'unacknowledged') {\n                  triggerList = _.filter(triggerList, trigger => {\n                    return !trigger.acknowledges;\n                  });\n                } else if (self.panel.showTriggers === 'acknowledged') {\n                  triggerList = _.filter(triggerList, 'acknowledges');\n                } else {\n                  triggerList = triggerList;\n                }\n\n                // Filter triggers by severity\n                triggerList = _.filter(triggerList, trigger => {\n                  return self.panel.triggerSeverity[trigger.priority].show;\n                });\n\n                // Sort triggers\n                if (self.panel.sortTriggersBy.value === 'priority') {\n                  triggerList = _.sortBy(triggerList, 'priority').reverse();\n                } else {\n                  triggerList = _.sortBy(triggerList, 'lastchangeUnix').reverse();\n                }\n\n                // Limit triggers number\n                self.triggerList  = _.first(triggerList, self.panel.limit);\n\n                // Notify panel that request is finished\n                self.setTimeQueryEnd();\n                self.loading = false;\n              });\n          });\n      });\n    });\n  }\n\n  switchComment(trigger) {\n    trigger.showComment = !trigger.showComment;\n  }\n\n  switchAcknowledges(trigger) {\n    trigger.showAcknowledges = !trigger.showAcknowledges;\n  }\n}\n\nTriggerPanelCtrl.templateUrl = 'panel-triggers/module.html';\n\nfunction filterTriggers(triggers, triggerFilter) {\n  if (utils.isRegex(triggerFilter)) {\n    return _.filter(triggers, function(trigger) {\n      return utils.buildRegex(triggerFilter).test(trigger.description);\n    });\n  } else {\n    return _.filter(triggers, function(trigger) {\n      return trigger.description === triggerFilter;\n    });\n  }\n}\n\nexport {\n  TriggerPanelCtrl,\n  TriggerPanelCtrl as PanelCtrl\n};\n"]}