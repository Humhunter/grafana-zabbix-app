{"version":3,"sources":["../../src/panel-triggers/module.js"],"names":[],"mappings":"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","file":"module.js","sourcesContent":["/**\n * Grafana-Zabbix\n * Zabbix plugin for Grafana.\n * http://github.com/alexanderzobnin/grafana-zabbix\n *\n * Trigger panel.\n * This feature sponsored by CORE IT\n * http://www.coreit.fr\n *\n * Copyright 2015 Alexander Zobnin alexanderzobnin@gmail.com\n * Licensed under the Apache License, Version 2.0\n */\n\nimport _ from 'lodash';\nimport moment from 'moment';\nimport * as utils from '../datasource-zabbix/utils';\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport {triggerPanelEditor} from './editor';\nimport './css/panel_triggers.css!';\n\nvar defaultSeverity = [\n  { priority: 0, severity: 'Not classified',  color: '#B7DBAB', show: true },\n  { priority: 1, severity: 'Information',     color: '#82B5D8', show: true },\n  { priority: 2, severity: 'Warning',         color: '#E5AC0E', show: true },\n  { priority: 3, severity: 'Average',         color: '#C15C17', show: true },\n  { priority: 4, severity: 'High',            color: '#BF1B00', show: true },\n  { priority: 5, severity: 'Disaster',        color: '#890F02', show: true }\n];\n\nvar panelDefaults = {\n  datasource: null,\n  triggers: {\n    group: {filter: \"\"},\n    host: {filter: \"\"},\n    application: {filter: \"\"},\n    trigger: {filter: \"\"}\n  },\n  hostField: true,\n  statusField: false,\n  severityField: false,\n  lastChangeField: true,\n  ageField: true,\n  infoField: true,\n  limit: 10,\n  showTriggers: 'all triggers',\n  sortTriggersBy: { text: 'last change', value: 'lastchange' },\n  showEvents: { text: 'Problems', value: '1' },\n  triggerSeverity: defaultSeverity,\n  okEventColor: 'rgba(0, 245, 153, 0.45)',\n};\n\nvar triggerStatusMap = {\n  '0': 'OK',\n  '1': 'Problem'\n};\n\nvar defaultTimeFormat = \"DD MMM YYYY HH:mm:ss\";\n\nclass TriggerPanelCtrl extends MetricsPanelCtrl {\n\n  /** @ngInject */\n  constructor($scope, $injector, $q, $element, datasourceSrv, templateSrv) {\n    super($scope, $injector);\n    this.datasourceSrv = datasourceSrv;\n    this.templateSrv = templateSrv;\n    this.triggerStatusMap = triggerStatusMap;\n    this.defaultTimeFormat = defaultTimeFormat;\n\n    // Load panel defaults\n    // _.cloneDeep() need for prevent changing shared defaultSeverity.\n    // Load object \"by value\" istead \"by reference\".\n    _.defaults(this.panel, _.cloneDeep(panelDefaults));\n\n    this.triggerList = [];\n    this.refreshData();\n  }\n\n  /**\n   * Override onInitMetricsPanelEditMode() method from MetricsPanelCtrl.\n   * We don't need metric editor from Metrics Panel.\n   */\n  onInitMetricsPanelEditMode() {\n    this.addEditorTab('Options', triggerPanelEditor, 2);\n  }\n\n  refresh() {\n    this.onMetricsPanelRefresh();\n  }\n\n  onMetricsPanelRefresh() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode()) { return; }\n\n    this.refreshData();\n  }\n\n  refreshData() {\n    // clear loading/error state\n    delete this.error;\n    this.loading = true;\n    this.setTimeQueryStart();\n\n    var self = this;\n\n    // Load datasource\n    return this.datasourceSrv.get(this.panel.datasource).then(datasource => {\n      var zabbix = datasource.zabbixAPI;\n      var queryProcessor = datasource.queryProcessor;\n      var showEvents = self.panel.showEvents.value;\n      var triggerFilter = self.panel.triggers;\n\n      // Replace template variables\n      var groupFilter = datasource.replaceTemplateVars(triggerFilter.group.filter);\n      var hostFilter = datasource.replaceTemplateVars(triggerFilter.host.filter);\n      var appFilter = datasource.replaceTemplateVars(triggerFilter.application.filter);\n\n      var buildQuery = queryProcessor.buildTriggerQuery(groupFilter, hostFilter, appFilter);\n      return buildQuery.then(query => {\n        return zabbix.getTriggers(query.groupids,\n                                  query.hostids,\n                                  query.applicationids,\n                                  showEvents)\n          .then(triggers => {\n            return _.map(triggers, trigger => {\n              var triggerObj = trigger;\n\n              // Format last change and age\n              trigger.lastchangeUnix = Number(trigger.lastchange);\n              var timestamp = moment.unix(trigger.lastchangeUnix);\n              if (self.panel.customLastChangeFormat) {\n                // User defined format\n                triggerObj.lastchange = timestamp.format(self.panel.lastChangeFormat);\n              } else {\n                triggerObj.lastchange = timestamp.format(self.defaultTimeFormat);\n              }\n              triggerObj.age = timestamp.fromNow(true);\n\n              // Set host that the trigger belongs\n              if (trigger.hosts.length) {\n                triggerObj.host = trigger.hosts[0].name;\n              }\n\n              // Set color\n              if (trigger.value === '1') {\n                // Problem state\n                triggerObj.color = self.panel.triggerSeverity[trigger.priority].color;\n              } else {\n                // OK state\n                triggerObj.color = self.panel.okEventColor;\n              }\n\n              triggerObj.severity = self.panel.triggerSeverity[trigger.priority].severity;\n              return triggerObj;\n            });\n          })\n          .then(triggerList => {\n\n            // Request acknowledges for trigger\n            var eventids = _.map(triggerList, trigger => {\n              return trigger.lastEvent.eventid;\n            });\n\n            return zabbix.getAcknowledges(eventids)\n              .then(events => {\n\n                // Map events to triggers\n                _.each(triggerList, trigger => {\n                  var event = _.find(events, event => {\n                    return event.eventid === trigger.lastEvent.eventid;\n                  });\n\n                  if (event) {\n                    trigger.acknowledges = _.map(event.acknowledges, ack => {\n                      var time = new Date(+ack.clock * 1000);\n                      ack.time = time.toLocaleString();\n                      ack.user = ack.alias + ' (' + ack.name + ' ' + ack.surname + ')';\n                      return ack;\n                    });\n                  }\n                });\n\n                // Filter triggers by description\n                var triggerFilter = self.panel.triggers.trigger.filter;\n                if (triggerFilter) {\n                  triggerList = filterTriggers(triggerList, triggerFilter);\n                }\n\n                // Filter acknowledged triggers\n                if (self.panel.showTriggers === 'unacknowledged') {\n                  triggerList = _.filter(triggerList, trigger => {\n                    return !trigger.acknowledges;\n                  });\n                } else if (self.panel.showTriggers === 'acknowledged') {\n                  triggerList = _.filter(triggerList, 'acknowledges');\n                } else {\n                  triggerList = triggerList;\n                }\n\n                // Filter triggers by severity\n                triggerList = _.filter(triggerList, trigger => {\n                  return self.panel.triggerSeverity[trigger.priority].show;\n                });\n\n                // Sort triggers\n                if (self.panel.sortTriggersBy.value === 'priority') {\n                  triggerList = _.sortBy(triggerList, 'priority').reverse();\n                } else {\n                  triggerList = _.sortBy(triggerList, 'lastchangeUnix').reverse();\n                }\n\n                // Limit triggers number\n                self.triggerList  = _.first(triggerList, self.panel.limit);\n\n                // Notify panel that request is finished\n                self.setTimeQueryEnd();\n                self.loading = false;\n              });\n          });\n      });\n    });\n  }\n\n  switchComment(trigger) {\n    trigger.showComment = !trigger.showComment;\n  }\n\n  switchAcknowledges(trigger) {\n    trigger.showAcknowledges = !trigger.showAcknowledges;\n  }\n}\n\nTriggerPanelCtrl.templateUrl = 'panel-triggers/module.html';\n\nfunction filterTriggers(triggers, triggerFilter) {\n  if (utils.isRegex(triggerFilter)) {\n    return _.filter(triggers, function(trigger) {\n      return utils.buildRegex(triggerFilter).test(trigger.description);\n    });\n  } else {\n    return _.filter(triggers, function(trigger) {\n      return trigger.description === triggerFilter;\n    });\n  }\n}\n\nexport {\n  TriggerPanelCtrl,\n  TriggerPanelCtrl as PanelCtrl\n};\n"]}